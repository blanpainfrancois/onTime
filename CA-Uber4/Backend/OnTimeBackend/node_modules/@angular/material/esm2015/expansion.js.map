{"version":3,"file":"expansion.js","sources":["../../packages/material/expansion/accordion.js","../../packages/material/expansion/accordion-item.js","../../packages/material/expansion/expansion-panel.js","../../packages/material/expansion/expansion-panel-header.js","../../packages/material/expansion/expansion-module.js","../../packages/material/expansion/index.js"],"sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Directive, Input } from '@angular/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\n/**\n * Unique ID counter\n */\nlet nextId = 0;\n/**\n * Directive whose purpose is to manage the expanded state of CdkAccordionItem children.\n */\nexport class CdkAccordion {\n    constructor() {\n        /**\n         * A readonly id value to use for unique selection coordination.\n         */\n        this.id = `cdk-accordion-${nextId++}`;\n        this._multi = false;\n        this._hideToggle = false;\n        /**\n         * The display mode used for all expansion panels in the accordion. Currently two display\n         * modes exist:\n         *   default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n         *     panel at a different elevation from the reset of the accordion.\n         *  flat - no spacing is placed around expanded panels, showing all panels at the same\n         *     elevation.\n         */\n        this.displayMode = 'default';\n    }\n    /**\n     * Whether the accordion should allow multiple expanded accordion items simulateously.\n     * @return {?}\n     */\n    get multi() { return this._multi; }\n    /**\n     * @param {?} multi\n     * @return {?}\n     */\n    set multi(multi) { this._multi = coerceBooleanProperty(multi); }\n    /**\n     * Whether the expansion indicator should be hidden.\n     * @return {?}\n     */\n    get hideToggle() { return this._hideToggle; }\n    /**\n     * @param {?} show\n     * @return {?}\n     */\n    set hideToggle(show) { this._hideToggle = coerceBooleanProperty(show); }\n}\nCdkAccordion.decorators = [\n    { type: Directive, args: [{\n                selector: 'cdk-accordion, [cdk-accordion]',\n                exportAs: 'cdkAccordion',\n            },] },\n];\n/**\n * @nocollapse\n */\nCdkAccordion.ctorParameters = () => [];\nCdkAccordion.propDecorators = {\n    'multi': [{ type: Input },],\n    'hideToggle': [{ type: Input },],\n    'displayMode': [{ type: Input },],\n};\nfunction CdkAccordion_tsickle_Closure_declarations() {\n    /** @type {?} */\n    CdkAccordion.decorators;\n    /**\n     * @nocollapse\n     * @type {?}\n     */\n    CdkAccordion.ctorParameters;\n    /** @type {?} */\n    CdkAccordion.propDecorators;\n    /**\n     * A readonly id value to use for unique selection coordination.\n     * @type {?}\n     */\n    CdkAccordion.prototype.id;\n    /** @type {?} */\n    CdkAccordion.prototype._multi;\n    /** @type {?} */\n    CdkAccordion.prototype._hideToggle;\n    /**\n     * The display mode used for all expansion panels in the accordion. Currently two display\n     * modes exist:\n     *   default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n     *     panel at a different elevation from the reset of the accordion.\n     *  flat - no spacing is placed around expanded panels, showing all panels at the same\n     *     elevation.\n     * @type {?}\n     */\n    CdkAccordion.prototype.displayMode;\n}\n/**\n * Directive for a Material Design Accordion.\n */\nexport class MatAccordion extends CdkAccordion {\n}\nMatAccordion.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-accordion',\n                exportAs: 'matAccordion',\n                host: {\n                    class: 'mat-accordion'\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nMatAccordion.ctorParameters = () => [];\nfunction MatAccordion_tsickle_Closure_declarations() {\n    /** @type {?} */\n    MatAccordion.decorators;\n    /**\n     * @nocollapse\n     * @type {?}\n     */\n    MatAccordion.ctorParameters;\n}\n//# sourceMappingURL=accordion.js.map","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Output, EventEmitter, Input, Injectable, Optional, ChangeDetectorRef, } from '@angular/core';\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\nimport { CdkAccordion } from './accordion';\n/**\n * Used to generate unique ID for each expansion panel.\n */\nlet nextId = 0;\n/**\n * An abstract class to be extended and decorated as a component.  Sets up all\n * events and attributes needed to be managed by a CdkAccordion parent.\n */\nexport class AccordionItem {\n    /**\n     * @param {?} accordion\n     * @param {?} _changeDetectorRef\n     * @param {?} _expansionDispatcher\n     */\n    constructor(accordion, _changeDetectorRef, _expansionDispatcher) {\n        this.accordion = accordion;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._expansionDispatcher = _expansionDispatcher;\n        /**\n         * Event emitted every time the AccordionItem is closed.\n         */\n        this.closed = new EventEmitter();\n        /**\n         * Event emitted every time the AccordionItem is opened.\n         */\n        this.opened = new EventEmitter();\n        /**\n         * Event emitted when the AccordionItem is destroyed.\n         */\n        this.destroyed = new EventEmitter();\n        /**\n         * The unique AccordionItem id.\n         */\n        this.id = `cdk-accordion-child-${nextId++}`;\n        /**\n         * Unregister function for _expansionDispatcher *\n         */\n        this._removeUniqueSelectionListener = () => { };\n        this._removeUniqueSelectionListener =\n            _expansionDispatcher.listen((id, accordionId) => {\n                if (this.accordion && !this.accordion.multi &&\n                    this.accordion.id === accordionId && this.id !== id) {\n                    this.expanded = false;\n                }\n            });\n    }\n    /**\n     * Whether the AccordionItem is expanded.\n     * @return {?}\n     */\n    get expanded() { return this._expanded; }\n    /**\n     * @param {?} expanded\n     * @return {?}\n     */\n    set expanded(expanded) {\n        // Only emit events and update the internal value if the value changes.\n        if (this._expanded !== expanded) {\n            this._expanded = expanded;\n            if (expanded) {\n                this.opened.emit();\n                /**\n                 * In the unique selection dispatcher, the id parameter is the id of the CdkAccordionItem,\n                 * the name value is the id of the accordion.\n                 */\n                const accordionId = this.accordion ? this.accordion.id : this.id;\n                this._expansionDispatcher.notify(this.id, accordionId);\n            }\n            else {\n                this.closed.emit();\n            }\n            // Ensures that the animation will run when the value is set outside of an `@Input`.\n            // This includes cases like the open, close and toggle methods.\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /**\n     * Emits an event for the accordion item being destroyed.\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this.destroyed.emit();\n        this._removeUniqueSelectionListener();\n    }\n    /**\n     * Toggles the expanded state of the accordion item.\n     * @return {?}\n     */\n    toggle() {\n        this.expanded = !this.expanded;\n    }\n    /**\n     * Sets the expanded state of the accordion item to false.\n     * @return {?}\n     */\n    close() {\n        this.expanded = false;\n    }\n    /**\n     * Sets the expanded state of the accordion item to true.\n     * @return {?}\n     */\n    open() {\n        this.expanded = true;\n    }\n}\nAccordionItem.decorators = [\n    { type: Injectable },\n];\n/**\n * @nocollapse\n */\nAccordionItem.ctorParameters = () => [\n    { type: CdkAccordion, decorators: [{ type: Optional },] },\n    { type: ChangeDetectorRef, },\n    { type: UniqueSelectionDispatcher, },\n];\nAccordionItem.propDecorators = {\n    'closed': [{ type: Output },],\n    'opened': [{ type: Output },],\n    'destroyed': [{ type: Output },],\n    'expanded': [{ type: Input },],\n};\nfunction AccordionItem_tsickle_Closure_declarations() {\n    /** @type {?} */\n    AccordionItem.decorators;\n    /**\n     * @nocollapse\n     * @type {?}\n     */\n    AccordionItem.ctorParameters;\n    /** @type {?} */\n    AccordionItem.propDecorators;\n    /**\n     * Event emitted every time the AccordionItem is closed.\n     * @type {?}\n     */\n    AccordionItem.prototype.closed;\n    /**\n     * Event emitted every time the AccordionItem is opened.\n     * @type {?}\n     */\n    AccordionItem.prototype.opened;\n    /**\n     * Event emitted when the AccordionItem is destroyed.\n     * @type {?}\n     */\n    AccordionItem.prototype.destroyed;\n    /**\n     * The unique AccordionItem id.\n     * @type {?}\n     */\n    AccordionItem.prototype.id;\n    /** @type {?} */\n    AccordionItem.prototype._expanded;\n    /**\n     * Unregister function for _expansionDispatcher *\n     * @type {?}\n     */\n    AccordionItem.prototype._removeUniqueSelectionListener;\n    /** @type {?} */\n    AccordionItem.prototype.accordion;\n    /** @type {?} */\n    AccordionItem.prototype._changeDetectorRef;\n    /** @type {?} */\n    AccordionItem.prototype._expansionDispatcher;\n}\n//# sourceMappingURL=accordion-item.js.map","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { animate, state, style, transition, trigger } from '@angular/animations';\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, Directive, forwardRef, Host, Input, Optional, ViewEncapsulation, } from '@angular/core';\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\nimport { mixinDisabled } from '@angular/material/core';\nimport { Subject } from 'rxjs/Subject';\nimport { MatAccordion } from './accordion';\nimport { AccordionItem } from './accordion-item';\n/**\n * \\@docs-private\n */\nexport class MatExpansionPanelBase extends AccordionItem {\n    /**\n     * @param {?} accordion\n     * @param {?} _changeDetectorRef\n     * @param {?} _uniqueSelectionDispatcher\n     */\n    constructor(accordion, _changeDetectorRef, _uniqueSelectionDispatcher) {\n        super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    }\n}\nexport const /** @type {?} */ _MatExpansionPanelMixinBase = mixinDisabled(MatExpansionPanelBase);\n/**\n * Time and timing curve for expansion panel animations.\n */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n/**\n * <mat-expansion-panel> component.\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the CdkAccordion directive attached.\n *\n * Please refer to README.md for examples on how to use it.\n */\nexport class MatExpansionPanel extends _MatExpansionPanelMixinBase {\n    /**\n     * @param {?} accordion\n     * @param {?} _changeDetectorRef\n     * @param {?} _uniqueSelectionDispatcher\n     */\n    constructor(accordion, _changeDetectorRef, _uniqueSelectionDispatcher) {\n        super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n        /**\n         * Whether the toggle indicator should be hidden.\n         */\n        this.hideToggle = false;\n        /**\n         * Stream that emits for changes in `\\@Input` properties.\n         */\n        this._inputChanges = new Subject();\n        this.accordion = accordion;\n    }\n    /**\n     * Whether the expansion indicator should be hidden.\n     * @return {?}\n     */\n    _getHideToggle() {\n        if (this.accordion) {\n            return this.accordion.hideToggle;\n        }\n        return this.hideToggle;\n    }\n    /**\n     * Determines whether the expansion panel should have spacing between it and its siblings.\n     * @return {?}\n     */\n    _hasSpacing() {\n        if (this.accordion) {\n            return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n        }\n        return false;\n    }\n    /**\n     * Gets the expanded state string.\n     * @return {?}\n     */\n    _getExpandedState() {\n        return this.expanded ? 'expanded' : 'collapsed';\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        this._inputChanges.next(changes);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._inputChanges.complete();\n    }\n}\nMatExpansionPanel.decorators = [\n    { type: Component, args: [{styles: [\".mat-expansion-panel{transition:box-shadow 280ms cubic-bezier(.4,0,.2,1);box-sizing:content-box;display:block;margin:0;transition:margin 225ms cubic-bezier(.4,0,.2,1)}.mat-expansion-panel:not([class*=mat-elevation-z]){box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12)}.mat-expansion-panel-content{overflow:hidden}.mat-expansion-panel-body{margin:0 24px 16px;overflow:auto}.mat-expansion-panel-spacing{margin:16px 0}.mat-accordion .mat-expansion-panel-spacing:first-child{margin-top:0}.mat-accordion .mat-expansion-panel-spacing:last-child{margin-bottom:0}.mat-action-row{border-top-style:solid;border-top-width:1px;display:flex;flex-direction:row;justify-content:flex-end;padding:16px 8px 16px 24px}.mat-action-row button.mat-button{margin-left:8px}[dir=rtl] .mat-action-row button.mat-button{margin-left:0;margin-right:8px}\"],\n                selector: 'mat-expansion-panel',\n                exportAs: 'matExpansionPanel',\n                template: \"<ng-content select=\\\"mat-expansion-panel-header\\\"></ng-content><div [class.mat-expanded]=\\\"expanded\\\" class=\\\"mat-expansion-panel-content\\\" [@bodyExpansion]=\\\"_getExpandedState()\\\" [id]=\\\"id\\\"><div class=\\\"mat-expansion-panel-body\\\"><ng-content></ng-content></div><ng-content select=\\\"mat-action-row\\\"></ng-content></div>\",\n                encapsulation: ViewEncapsulation.None,\n                preserveWhitespaces: false,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                inputs: ['disabled', 'expanded'],\n                host: {\n                    'class': 'mat-expansion-panel',\n                    '[class.mat-expanded]': 'expanded',\n                    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n                },\n                providers: [\n                    { provide: AccordionItem, useExisting: forwardRef(() => MatExpansionPanel) }\n                ],\n                animations: [\n                    trigger('bodyExpansion', [\n                        state('collapsed', style({ height: '0px', visibility: 'hidden' })),\n                        state('expanded', style({ height: '*', visibility: 'visible' })),\n                        transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n                    ]),\n                ],\n            },] },\n];\n/**\n * @nocollapse\n */\nMatExpansionPanel.ctorParameters = () => [\n    { type: MatAccordion, decorators: [{ type: Optional }, { type: Host },] },\n    { type: ChangeDetectorRef, },\n    { type: UniqueSelectionDispatcher, },\n];\nMatExpansionPanel.propDecorators = {\n    'hideToggle': [{ type: Input },],\n};\nfunction MatExpansionPanel_tsickle_Closure_declarations() {\n    /** @type {?} */\n    MatExpansionPanel.decorators;\n    /**\n     * @nocollapse\n     * @type {?}\n     */\n    MatExpansionPanel.ctorParameters;\n    /** @type {?} */\n    MatExpansionPanel.propDecorators;\n    /**\n     * Whether the toggle indicator should be hidden.\n     * @type {?}\n     */\n    MatExpansionPanel.prototype.hideToggle;\n    /**\n     * Stream that emits for changes in `\\@Input` properties.\n     * @type {?}\n     */\n    MatExpansionPanel.prototype._inputChanges;\n}\nexport class MatExpansionPanelActionRow {\n}\nMatExpansionPanelActionRow.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-action-row',\n                host: {\n                    class: 'mat-action-row'\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nMatExpansionPanelActionRow.ctorParameters = () => [];\nfunction MatExpansionPanelActionRow_tsickle_Closure_declarations() {\n    /** @type {?} */\n    MatExpansionPanelActionRow.decorators;\n    /**\n     * @nocollapse\n     * @type {?}\n     */\n    MatExpansionPanelActionRow.ctorParameters;\n}\n//# sourceMappingURL=expansion-panel.js.map","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { animate, state, style, transition, trigger } from '@angular/animations';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { ENTER, SPACE } from '@angular/cdk/keycodes';\nimport { filter } from '@angular/cdk/rxjs';\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, Directive, ElementRef, Host, Input, Renderer2, ViewEncapsulation, } from '@angular/core';\nimport { merge } from 'rxjs/observable/merge';\nimport { Subscription } from 'rxjs/Subscription';\nimport { EXPANSION_PANEL_ANIMATION_TIMING, MatExpansionPanel } from './expansion-panel';\n/**\n * <mat-expansion-panel-header> component.\n *\n * This component corresponds to the header element of an <mat-expansion-panel>.\n *\n * Please refer to README.md for examples on how to use it.\n */\nexport class MatExpansionPanelHeader {\n    /**\n     * @param {?} renderer\n     * @param {?} panel\n     * @param {?} _element\n     * @param {?} _focusMonitor\n     * @param {?} _changeDetectorRef\n     */\n    constructor(renderer, panel, _element, _focusMonitor, _changeDetectorRef) {\n        this.panel = panel;\n        this._element = _element;\n        this._focusMonitor = _focusMonitor;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._parentChangeSubscription = Subscription.EMPTY;\n        // Since the toggle state depends on an @Input on the panel, we\n        // need to  subscribe and trigger change detection manually.\n        this._parentChangeSubscription = merge(panel.opened, panel.closed, filter.call(panel._inputChanges, changes => !!(changes.hideToggle || changes.disabled)))\n            .subscribe(() => this._changeDetectorRef.markForCheck());\n        _focusMonitor.monitor(_element.nativeElement, renderer, false);\n    }\n    /**\n     * Toggles the expanded state of the panel.\n     * @return {?}\n     */\n    _toggle() {\n        if (!this.panel.disabled) {\n            this.panel.toggle();\n        }\n    }\n    /**\n     * Gets whether the panel is expanded.\n     * @return {?}\n     */\n    _isExpanded() {\n        return this.panel.expanded;\n    }\n    /**\n     * Gets the expanded state string of the panel.\n     * @return {?}\n     */\n    _getExpandedState() {\n        return this.panel._getExpandedState();\n    }\n    /**\n     * Gets the panel id.\n     * @return {?}\n     */\n    _getPanelId() {\n        return this.panel.id;\n    }\n    /**\n     * Gets whether the expand indicator should be shown.\n     * @return {?}\n     */\n    _showToggle() {\n        return !this.panel.hideToggle && !this.panel.disabled;\n    }\n    /**\n     * Handle keyup event calling to toggle() if appropriate.\n     * @param {?} event\n     * @return {?}\n     */\n    _keyup(event) {\n        switch (event.keyCode) {\n            // Toggle for space and enter keys.\n            case SPACE:\n            case ENTER:\n                event.preventDefault();\n                this._toggle();\n                break;\n            default:\n                return;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._parentChangeSubscription.unsubscribe();\n        this._focusMonitor.stopMonitoring(this._element.nativeElement);\n    }\n}\nMatExpansionPanelHeader.decorators = [\n    { type: Component, args: [{selector: 'mat-expansion-panel-header',\n                styles: [\".mat-expansion-panel-header{display:flex;flex-direction:row;align-items:center;padding:0 24px}.mat-expansion-panel-header:focus,.mat-expansion-panel-header:hover{outline:0}.mat-expansion-panel-header.mat-expanded:focus,.mat-expansion-panel-header.mat-expanded:hover{background:inherit}.mat-expansion-panel-header:not([aria-disabled=true]){cursor:pointer}.mat-content{display:flex;flex:1;flex-direction:row;overflow:hidden}.mat-expansion-panel-header-description,.mat-expansion-panel-header-title{display:flex;flex-grow:1;margin-right:16px}[dir=rtl] .mat-expansion-panel-header-description,[dir=rtl] .mat-expansion-panel-header-title{margin-right:0;margin-left:16px}.mat-expansion-panel-header-description{flex-grow:2}.mat-expansion-indicator::after{border-style:solid;border-width:0 2px 2px 0;content:'';display:inline-block;padding:3px;transform:rotate(45deg);vertical-align:middle}\"],\n                template: \"<span class=\\\"mat-content\\\"><ng-content select=\\\"mat-panel-title\\\"></ng-content><ng-content select=\\\"mat-panel-description\\\"></ng-content><ng-content></ng-content></span><span [@indicatorRotate]=\\\"_getExpandedState()\\\" *ngIf=\\\"_showToggle()\\\" class=\\\"mat-expansion-indicator\\\"></span>\",\n                encapsulation: ViewEncapsulation.None,\n                preserveWhitespaces: false,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                host: {\n                    'class': 'mat-expansion-panel-header',\n                    'role': 'button',\n                    '[attr.tabindex]': 'panel.disabled ? -1 : 0',\n                    '[attr.aria-controls]': '_getPanelId()',\n                    '[attr.aria-expanded]': '_isExpanded()',\n                    '[attr.aria-disabled]': 'panel.disabled',\n                    '[class.mat-expanded]': '_isExpanded()',\n                    '(click)': '_toggle()',\n                    '(keyup)': '_keyup($event)',\n                    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n                },\n                animations: [\n                    trigger('indicatorRotate', [\n                        state('collapsed', style({ transform: 'rotate(0deg)' })),\n                        state('expanded', style({ transform: 'rotate(180deg)' })),\n                        transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n                    ]),\n                    trigger('expansionHeight', [\n                        state('collapsed', style({\n                            height: '{{collapsedHeight}}',\n                        }), {\n                            params: { collapsedHeight: '48px' },\n                        }),\n                        state('expanded', style({\n                            height: '{{expandedHeight}}'\n                        }), {\n                            params: { expandedHeight: '64px' }\n                        }),\n                        transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n                    ]),\n                ],\n            },] },\n];\n/**\n * @nocollapse\n */\nMatExpansionPanelHeader.ctorParameters = () => [\n    { type: Renderer2, },\n    { type: MatExpansionPanel, decorators: [{ type: Host },] },\n    { type: ElementRef, },\n    { type: FocusMonitor, },\n    { type: ChangeDetectorRef, },\n];\nMatExpansionPanelHeader.propDecorators = {\n    'expandedHeight': [{ type: Input },],\n    'collapsedHeight': [{ type: Input },],\n};\nfunction MatExpansionPanelHeader_tsickle_Closure_declarations() {\n    /** @type {?} */\n    MatExpansionPanelHeader.decorators;\n    /**\n     * @nocollapse\n     * @type {?}\n     */\n    MatExpansionPanelHeader.ctorParameters;\n    /** @type {?} */\n    MatExpansionPanelHeader.propDecorators;\n    /** @type {?} */\n    MatExpansionPanelHeader.prototype._parentChangeSubscription;\n    /**\n     * Height of the header while the panel is expanded.\n     * @type {?}\n     */\n    MatExpansionPanelHeader.prototype.expandedHeight;\n    /**\n     * Height of the header while the panel is collapsed.\n     * @type {?}\n     */\n    MatExpansionPanelHeader.prototype.collapsedHeight;\n    /** @type {?} */\n    MatExpansionPanelHeader.prototype.panel;\n    /** @type {?} */\n    MatExpansionPanelHeader.prototype._element;\n    /** @type {?} */\n    MatExpansionPanelHeader.prototype._focusMonitor;\n    /** @type {?} */\n    MatExpansionPanelHeader.prototype._changeDetectorRef;\n}\n/**\n * <mat-panel-description> directive.\n *\n * This direction is to be used inside of the MatExpansionPanelHeader component.\n */\nexport class MatExpansionPanelDescription {\n}\nMatExpansionPanelDescription.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-panel-description',\n                host: {\n                    class: 'mat-expansion-panel-header-description'\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nMatExpansionPanelDescription.ctorParameters = () => [];\nfunction MatExpansionPanelDescription_tsickle_Closure_declarations() {\n    /** @type {?} */\n    MatExpansionPanelDescription.decorators;\n    /**\n     * @nocollapse\n     * @type {?}\n     */\n    MatExpansionPanelDescription.ctorParameters;\n}\n/**\n * <mat-panel-title> directive.\n *\n * This direction is to be used inside of the MatExpansionPanelHeader component.\n */\nexport class MatExpansionPanelTitle {\n}\nMatExpansionPanelTitle.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-panel-title',\n                host: {\n                    class: 'mat-expansion-panel-header-title'\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nMatExpansionPanelTitle.ctorParameters = () => [];\nfunction MatExpansionPanelTitle_tsickle_Closure_declarations() {\n    /** @type {?} */\n    MatExpansionPanelTitle.decorators;\n    /**\n     * @nocollapse\n     * @type {?}\n     */\n    MatExpansionPanelTitle.ctorParameters;\n}\n//# sourceMappingURL=expansion-panel-header.js.map","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UNIQUE_SELECTION_DISPATCHER_PROVIDER } from '@angular/cdk/collections';\nimport { A11yModule } from '@angular/cdk/a11y';\nimport { CdkAccordion, MatAccordion } from './accordion';\nimport { MatExpansionPanel, MatExpansionPanelActionRow } from './expansion-panel';\nimport { MatExpansionPanelDescription, MatExpansionPanelHeader, MatExpansionPanelTitle, } from './expansion-panel-header';\nexport class MatExpansionModule {\n}\nMatExpansionModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [CommonModule, A11yModule],\n                exports: [\n                    CdkAccordion,\n                    MatAccordion,\n                    MatExpansionPanel,\n                    MatExpansionPanelActionRow,\n                    MatExpansionPanelHeader,\n                    MatExpansionPanelTitle,\n                    MatExpansionPanelDescription\n                ],\n                declarations: [\n                    CdkAccordion,\n                    MatAccordion,\n                    MatExpansionPanel,\n                    MatExpansionPanelActionRow,\n                    MatExpansionPanelHeader,\n                    MatExpansionPanelTitle,\n                    MatExpansionPanelDescription\n                ],\n                providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER]\n            },] },\n];\n/**\n * @nocollapse\n */\nMatExpansionModule.ctorParameters = () => [];\nfunction MatExpansionModule_tsickle_Closure_declarations() {\n    /** @type {?} */\n    MatExpansionModule.decorators;\n    /**\n     * @nocollapse\n     * @type {?}\n     */\n    MatExpansionModule.ctorParameters;\n}\n//# sourceMappingURL=expansion-module.js.map","/**\n * Generated bundle index. Do not edit.\n */\nexport { CdkAccordion, MatAccordion, AccordionItem, MatExpansionPanel, MatExpansionPanelActionRow, MatExpansionPanelHeader, MatExpansionPanelDescription, MatExpansionPanelTitle, MatExpansionModule } from './public-api';\nexport { EXPANSION_PANEL_ANIMATION_TIMING as ɵc15, MatExpansionPanelBase as ɵa15, _MatExpansionPanelMixinBase as ɵb15 } from './expansion-panel';\n//# sourceMappingURL=index.js.map"],"names":["nextId"],"mappings":"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"}