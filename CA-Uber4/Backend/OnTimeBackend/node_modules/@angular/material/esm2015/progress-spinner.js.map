{"version":3,"file":"progress-spinner.js","sources":["../../packages/material/progress-spinner/progress-spinner.js","../../packages/material/progress-spinner/progress-spinner-module.js","../../packages/material/progress-spinner/index.js"],"sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Component, ChangeDetectionStrategy, Input, ElementRef, Renderer2, ViewEncapsulation, Optional, Inject, } from '@angular/core';\nimport { mixinColor } from '@angular/material/core';\nimport { Platform } from '@angular/cdk/platform';\nimport { DOCUMENT } from '@angular/common';\n/**\n * \\@docs-private\n */\nexport class MatProgressSpinnerBase {\n    /**\n     * @param {?} _renderer\n     * @param {?} _elementRef\n     */\n    constructor(_renderer, _elementRef) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n    }\n}\nfunction MatProgressSpinnerBase_tsickle_Closure_declarations() {\n    /** @type {?} */\n    MatProgressSpinnerBase.prototype._renderer;\n    /** @type {?} */\n    MatProgressSpinnerBase.prototype._elementRef;\n}\nexport const /** @type {?} */ _MatProgressSpinnerMixinBase = mixinColor(MatProgressSpinnerBase, 'primary');\nconst /** @type {?} */ INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.51%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.1%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.51%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.01%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.51%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.01%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.51%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n/**\n * <mat-progress-spinner> component.\n */\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase {\n    /**\n     * @param {?} _renderer\n     * @param {?} _elementRef\n     * @param {?} platform\n     * @param {?} _document\n     */\n    constructor(_renderer, _elementRef, platform, _document) {\n        super(_renderer, _elementRef);\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n        this._document = _document;\n        this._baseSize = 100;\n        this._baseStrokeWidth = 10;\n        this._fallbackAnimation = false;\n        /**\n         * The width and height of the host element. Will grow with stroke width. *\n         */\n        this._elementSize = this._baseSize;\n        this._diameter = this._baseSize;\n        /**\n         * Stroke width of the progress spinner.\n         */\n        this.strokeWidth = 10;\n        /**\n         * Mode of the progress circle\n         */\n        this.mode = 'determinate';\n        this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n        // On IE and Edge, we can't animate the `stroke-dashoffset`\n        // reliably so we fall back to a non-spec animation.\n        const animationClass = this._fallbackAnimation ?\n            'mat-progress-spinner-indeterminate-fallback-animation' :\n            'mat-progress-spinner-indeterminate-animation';\n        _renderer.addClass(_elementRef.nativeElement, animationClass);\n    }\n    /**\n     * The diameter of the progress spinner (will set width and height of svg).\n     * @return {?}\n     */\n    get diameter() {\n        return this._diameter;\n    }\n    /**\n     * @param {?} size\n     * @return {?}\n     */\n    set diameter(size) {\n        this._setDiameterAndInitStyles(size);\n    }\n    /**\n     * Value of the progress circle.\n     * @return {?}\n     */\n    get value() {\n        return this.mode === 'determinate' ? this._value : 0;\n    }\n    /**\n     * @param {?} newValue\n     * @return {?}\n     */\n    set value(newValue) {\n        if (newValue != null && this.mode === 'determinate') {\n            this._value = Math.max(0, Math.min(100, newValue));\n        }\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        if (changes.strokeWidth || changes.diameter) {\n            this._elementSize =\n                this._diameter + Math.max(this.strokeWidth - this._baseStrokeWidth, 0);\n        }\n    }\n    /**\n     * The radius of the spinner, adjusted for stroke width.\n     * @return {?}\n     */\n    get _circleRadius() {\n        return (this.diameter - this._baseStrokeWidth) / 2;\n    }\n    /**\n     * The view box of the spinner's svg element.\n     * @return {?}\n     */\n    get _viewBox() {\n        return `0 0 ${this._elementSize} ${this._elementSize}`;\n    }\n    /**\n     * The stroke circumference of the svg circle.\n     * @return {?}\n     */\n    get _strokeCircumference() {\n        return 2 * Math.PI * this._circleRadius;\n    }\n    /**\n     * The dash offset of the svg circle.\n     * @return {?}\n     */\n    get _strokeDashOffset() {\n        if (this.mode === 'determinate') {\n            return this._strokeCircumference * (100 - this._value) / 100;\n        }\n        return null;\n    }\n    /**\n     * Sets the diameter and adds diameter-specific styles if necessary.\n     * @param {?} size\n     * @return {?}\n     */\n    _setDiameterAndInitStyles(size) {\n        this._diameter = size;\n        if (!MatProgressSpinner.diameters.has(this.diameter) && !this._fallbackAnimation) {\n            this._attachStyleNode();\n        }\n    }\n    /**\n     * Dynamically generates a style tag containing the correct animation for this diameter.\n     * @return {?}\n     */\n    _attachStyleNode() {\n        const /** @type {?} */ styleTag = this._renderer.createElement('style');\n        styleTag.textContent = this._getAnimationText();\n        this._renderer.appendChild(this._document.head, styleTag);\n        MatProgressSpinner.diameters.add(this.diameter);\n    }\n    /**\n     * Generates animation styles adjusted for the spinner's diameter.\n     * @return {?}\n     */\n    _getAnimationText() {\n        return INDETERMINATE_ANIMATION_TEMPLATE\n            .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n            .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n            .replace(/DIAMETER/g, `${this.diameter}`);\n    }\n}\n/**\n * Tracks diameters of existing instances to de-dupe generated styles (default d = 100)\n */\nMatProgressSpinner.diameters = new Set([100]);\nMatProgressSpinner.decorators = [\n    { type: Component, args: [{selector: 'mat-progress-spinner',\n                exportAs: 'matProgressSpinner',\n                host: {\n                    'role': 'progressbar',\n                    'class': 'mat-progress-spinner',\n                    '[style.width.px]': '_elementSize',\n                    '[style.height.px]': '_elementSize',\n                    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n                    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n                    '[attr.aria-valuenow]': 'value',\n                    '[attr.mode]': 'mode',\n                },\n                inputs: ['color'],\n                template: \"<svg [style.width.px]=\\\"_elementSize\\\" [style.height.px]=\\\"_elementSize\\\" [attr.viewBox]=\\\"_viewBox\\\" preserveAspectRatio=\\\"xMidYMid meet\\\" focusable=\\\"false\\\"><circle cx=\\\"50%\\\" cy=\\\"50%\\\" [attr.r]=\\\"_circleRadius\\\" [style.animation-name]=\\\"'mat-progress-spinner-stroke-rotate-' + diameter\\\" [style.stroke-dashoffset.px]=\\\"_strokeDashOffset\\\" [style.stroke-dasharray.px]=\\\"_strokeCircumference\\\" [style.transform.rotate]=\\\"'360deg'\\\" [style.stroke-width.px]=\\\"strokeWidth\\\"></circle></svg>\",\n                styles: [\".mat-progress-spinner{display:block;position:relative}.mat-progress-spinner svg{position:absolute;transform:translate(-50%,-50%) rotate(-90deg);top:50%;left:50%;transform-origin:center;overflow:visible}.mat-progress-spinner circle{fill:transparent;transform-origin:center;transition:stroke-dashoffset 225ms linear}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate]{animation:mat-progress-spinner-linear-rotate 2s linear infinite}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition-property:stroke;animation-duration:4s;animation-timing-function:cubic-bezier(.35,0,.25,1);animation-iteration-count:infinite}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate]{animation:mat-progress-spinner-stroke-rotate-fallback 10s cubic-bezier(.87,.03,.33,1) infinite}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition-property:stroke}@keyframes mat-progress-spinner-linear-rotate{0%{transform:rotate(0)}100%{transform:rotate(360deg)}}@keyframes mat-progress-spinner-stroke-rotate-100{0%{stroke-dashoffset:268.60617px;transform:rotate(0)}12.5%{stroke-dashoffset:56.54867px;transform:rotate(0)}12.51%{stroke-dashoffset:56.54867px;transform:rotateX(180deg) rotate(72.5deg)}25%{stroke-dashoffset:268.60617px;transform:rotateX(180deg) rotate(72.5deg)}25.1%{stroke-dashoffset:268.60617px;transform:rotate(270deg)}37.5%{stroke-dashoffset:56.54867px;transform:rotate(270deg)}37.51%{stroke-dashoffset:56.54867px;transform:rotateX(180deg) rotate(161.5deg)}50%{stroke-dashoffset:268.60617px;transform:rotateX(180deg) rotate(161.5deg)}50.01%{stroke-dashoffset:268.60617px;transform:rotate(180deg)}62.5%{stroke-dashoffset:56.54867px;transform:rotate(180deg)}62.51%{stroke-dashoffset:56.54867px;transform:rotateX(180deg) rotate(251.5deg)}75%{stroke-dashoffset:268.60617px;transform:rotateX(180deg) rotate(251.5deg)}75.01%{stroke-dashoffset:268.60617px;transform:rotate(90deg)}87.5%{stroke-dashoffset:56.54867px;transform:rotate(90deg)}87.51%{stroke-dashoffset:56.54867px;transform:rotateX(180deg) rotate(341.5deg)}100%{stroke-dashoffset:268.60617px;transform:rotateX(180deg) rotate(341.5deg)}}@keyframes mat-progress-spinner-stroke-rotate-fallback{0%{transform:rotate(0)}25%{transform:rotate(1170deg)}50%{transform:rotate(2340deg)}75%{transform:rotate(3510deg)}100%{transform:rotate(4680deg)}}\"],\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n                preserveWhitespaces: false,\n            },] },\n];\n/**\n * @nocollapse\n */\nMatProgressSpinner.ctorParameters = () => [\n    { type: Renderer2, },\n    { type: ElementRef, },\n    { type: Platform, },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] },] },\n];\nMatProgressSpinner.propDecorators = {\n    'diameter': [{ type: Input },],\n    'strokeWidth': [{ type: Input },],\n    'mode': [{ type: Input },],\n    'value': [{ type: Input },],\n};\nfunction MatProgressSpinner_tsickle_Closure_declarations() {\n    /**\n     * Tracks diameters of existing instances to de-dupe generated styles (default d = 100)\n     * @type {?}\n     */\n    MatProgressSpinner.diameters;\n    /** @type {?} */\n    MatProgressSpinner.decorators;\n    /**\n     * @nocollapse\n     * @type {?}\n     */\n    MatProgressSpinner.ctorParameters;\n    /** @type {?} */\n    MatProgressSpinner.propDecorators;\n    /** @type {?} */\n    MatProgressSpinner.prototype._value;\n    /** @type {?} */\n    MatProgressSpinner.prototype._baseSize;\n    /** @type {?} */\n    MatProgressSpinner.prototype._baseStrokeWidth;\n    /** @type {?} */\n    MatProgressSpinner.prototype._fallbackAnimation;\n    /**\n     * The width and height of the host element. Will grow with stroke width. *\n     * @type {?}\n     */\n    MatProgressSpinner.prototype._elementSize;\n    /** @type {?} */\n    MatProgressSpinner.prototype._diameter;\n    /**\n     * Stroke width of the progress spinner.\n     * @type {?}\n     */\n    MatProgressSpinner.prototype.strokeWidth;\n    /**\n     * Mode of the progress circle\n     * @type {?}\n     */\n    MatProgressSpinner.prototype.mode;\n    /** @type {?} */\n    MatProgressSpinner.prototype._renderer;\n    /** @type {?} */\n    MatProgressSpinner.prototype._elementRef;\n    /** @type {?} */\n    MatProgressSpinner.prototype._document;\n}\n/**\n * <mat-spinner> component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate <mat-progress-spinner> instance.\n */\nexport class MatSpinner extends MatProgressSpinner {\n    /**\n     * @param {?} renderer\n     * @param {?} elementRef\n     * @param {?} platform\n     * @param {?} document\n     */\n    constructor(renderer, elementRef, platform, document) {\n        super(renderer, elementRef, platform, document);\n        this.mode = 'indeterminate';\n    }\n}\nMatSpinner.decorators = [\n    { type: Component, args: [{selector: 'mat-spinner',\n                host: {\n                    'role': 'progressbar',\n                    'mode': 'indeterminate',\n                    'class': 'mat-spinner mat-progress-spinner',\n                    '[style.width.px]': '_elementSize',\n                    '[style.height.px]': '_elementSize',\n                },\n                inputs: ['color'],\n                template: \"<svg [style.width.px]=\\\"_elementSize\\\" [style.height.px]=\\\"_elementSize\\\" [attr.viewBox]=\\\"_viewBox\\\" preserveAspectRatio=\\\"xMidYMid meet\\\" focusable=\\\"false\\\"><circle cx=\\\"50%\\\" cy=\\\"50%\\\" [attr.r]=\\\"_circleRadius\\\" [style.animation-name]=\\\"'mat-progress-spinner-stroke-rotate-' + diameter\\\" [style.stroke-dashoffset.px]=\\\"_strokeDashOffset\\\" [style.stroke-dasharray.px]=\\\"_strokeCircumference\\\" [style.transform.rotate]=\\\"'360deg'\\\" [style.stroke-width.px]=\\\"strokeWidth\\\"></circle></svg>\",\n                styles: [\".mat-progress-spinner{display:block;position:relative}.mat-progress-spinner svg{position:absolute;transform:translate(-50%,-50%) rotate(-90deg);top:50%;left:50%;transform-origin:center;overflow:visible}.mat-progress-spinner circle{fill:transparent;transform-origin:center;transition:stroke-dashoffset 225ms linear}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate]{animation:mat-progress-spinner-linear-rotate 2s linear infinite}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition-property:stroke;animation-duration:4s;animation-timing-function:cubic-bezier(.35,0,.25,1);animation-iteration-count:infinite}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate]{animation:mat-progress-spinner-stroke-rotate-fallback 10s cubic-bezier(.87,.03,.33,1) infinite}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition-property:stroke}@keyframes mat-progress-spinner-linear-rotate{0%{transform:rotate(0)}100%{transform:rotate(360deg)}}@keyframes mat-progress-spinner-stroke-rotate-100{0%{stroke-dashoffset:268.60617px;transform:rotate(0)}12.5%{stroke-dashoffset:56.54867px;transform:rotate(0)}12.51%{stroke-dashoffset:56.54867px;transform:rotateX(180deg) rotate(72.5deg)}25%{stroke-dashoffset:268.60617px;transform:rotateX(180deg) rotate(72.5deg)}25.1%{stroke-dashoffset:268.60617px;transform:rotate(270deg)}37.5%{stroke-dashoffset:56.54867px;transform:rotate(270deg)}37.51%{stroke-dashoffset:56.54867px;transform:rotateX(180deg) rotate(161.5deg)}50%{stroke-dashoffset:268.60617px;transform:rotateX(180deg) rotate(161.5deg)}50.01%{stroke-dashoffset:268.60617px;transform:rotate(180deg)}62.5%{stroke-dashoffset:56.54867px;transform:rotate(180deg)}62.51%{stroke-dashoffset:56.54867px;transform:rotateX(180deg) rotate(251.5deg)}75%{stroke-dashoffset:268.60617px;transform:rotateX(180deg) rotate(251.5deg)}75.01%{stroke-dashoffset:268.60617px;transform:rotate(90deg)}87.5%{stroke-dashoffset:56.54867px;transform:rotate(90deg)}87.51%{stroke-dashoffset:56.54867px;transform:rotateX(180deg) rotate(341.5deg)}100%{stroke-dashoffset:268.60617px;transform:rotateX(180deg) rotate(341.5deg)}}@keyframes mat-progress-spinner-stroke-rotate-fallback{0%{transform:rotate(0)}25%{transform:rotate(1170deg)}50%{transform:rotate(2340deg)}75%{transform:rotate(3510deg)}100%{transform:rotate(4680deg)}}\"],\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n                preserveWhitespaces: false,\n            },] },\n];\n/**\n * @nocollapse\n */\nMatSpinner.ctorParameters = () => [\n    { type: Renderer2, },\n    { type: ElementRef, },\n    { type: Platform, },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] },] },\n];\nfunction MatSpinner_tsickle_Closure_declarations() {\n    /** @type {?} */\n    MatSpinner.decorators;\n    /**\n     * @nocollapse\n     * @type {?}\n     */\n    MatSpinner.ctorParameters;\n}\n//# sourceMappingURL=progress-spinner.js.map","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { NgModule } from '@angular/core';\nimport { PlatformModule } from '@angular/cdk/platform';\nimport { MatCommonModule } from '@angular/material/core';\nimport { MatProgressSpinner, MatSpinner } from './progress-spinner';\nclass MatProgressSpinnerModule {\n}\nMatProgressSpinnerModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [MatCommonModule, PlatformModule],\n                exports: [\n                    MatProgressSpinner,\n                    MatSpinner,\n                    MatCommonModule\n                ],\n                declarations: [\n                    MatProgressSpinner,\n                    MatSpinner\n                ],\n            },] },\n];\n/**\n * @nocollapse\n */\nMatProgressSpinnerModule.ctorParameters = () => [];\nfunction MatProgressSpinnerModule_tsickle_Closure_declarations() {\n    /** @type {?} */\n    MatProgressSpinnerModule.decorators;\n    /**\n     * @nocollapse\n     * @type {?}\n     */\n    MatProgressSpinnerModule.ctorParameters;\n}\nexport { MatProgressSpinnerModule };\n//# sourceMappingURL=progress-spinner-module.js.map","/**\n * Generated bundle index. Do not edit.\n */\nexport { MatProgressSpinnerModule, MatProgressSpinnerBase, _MatProgressSpinnerMixinBase, MatProgressSpinner, MatSpinner } from './public-api';\n//# sourceMappingURL=index.js.map"],"names":[],"mappings":"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"}