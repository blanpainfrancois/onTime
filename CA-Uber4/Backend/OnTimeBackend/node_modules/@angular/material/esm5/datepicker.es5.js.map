{"version":3,"file":"datepicker.es5.js","sources":["../../packages/material/esm5/datepicker/coerce-date-property.js","../../packages/material/esm5/datepicker/datepicker-errors.js","../../packages/material/esm5/datepicker/datepicker-intl.js","../../packages/material/esm5/datepicker/calendar-body.js","../../packages/material/esm5/datepicker/month-view.js","../../packages/material/esm5/datepicker/year-view.js","../../packages/material/esm5/datepicker/calendar.js","../../packages/material/esm5/datepicker/datepicker.js","../../packages/material/esm5/datepicker/datepicker-input.js","../../packages/material/esm5/datepicker/datepicker-toggle.js","../../packages/material/esm5/datepicker/datepicker-module.js","../../packages/material/esm5/datepicker/index.js"],"sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Function that attempts to coerce a value to a date using a DateAdapter. Date instances, null,\n * and undefined will be passed through. Empty strings will be coerced to null. Valid ISO 8601\n * strings (https://www.ietf.org/rfc/rfc3339.txt) will be coerced to dates. All other values will\n * result in an error being thrown.\n * @throws Throws when the value cannot be coerced.\n * @template D\n * @param {?} adapter The date adapter to use for coercion\n * @param {?} value The value to coerce.\n * @return {?} A date object coerced from the value.\n */\nexport function coerceDateProperty(adapter, value) {\n    if (typeof value === 'string') {\n        if (value == '') {\n            value = null;\n        }\n        else {\n            value = adapter.fromIso8601(value) || value;\n        }\n    }\n    if (value == null || adapter.isDateInstance(value)) {\n        return value;\n    }\n    throw Error(\"Datepicker: Value must be either a date object recognized by the DateAdapter or \" +\n        (\"an ISO 8601 string. Instead got: \" + value));\n}\n//# sourceMappingURL=coerce-date-property.js.map","/**\n * \\@docs-private\n * @param {?} provider\n * @return {?}\n */\nexport function createMissingDateImplError(provider) {\n    return Error(\"MatDatepicker: No provider found for \" + provider + \". You must import one of the following \" +\n        \"modules at your application root: MatNativeDateModule, or provide a custom implementation.\");\n}\n//# sourceMappingURL=datepicker-errors.js.map","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs/Subject';\n/**\n * Datepicker data that requires internationalization.\n */\nvar MatDatepickerIntl = (function () {\n    function MatDatepickerIntl() {\n        /**\n         * Stream that emits whenever the labels here are changed. Use this to notify\n         * components if the labels have changed after initialization.\n         */\n        this.changes = new Subject();\n        /**\n         * A label for the calendar popup (used by screen readers).\n         */\n        this.calendarLabel = 'Calendar';\n        /**\n         * A label for the button used to open the calendar popup (used by screen readers).\n         */\n        this.openCalendarLabel = 'Open calendar';\n        /**\n         * A label for the previous month button (used by screen readers).\n         */\n        this.prevMonthLabel = 'Previous month';\n        /**\n         * A label for the next month button (used by screen readers).\n         */\n        this.nextMonthLabel = 'Next month';\n        /**\n         * A label for the previous year button (used by screen readers).\n         */\n        this.prevYearLabel = 'Previous year';\n        /**\n         * A label for the next year button (used by screen readers).\n         */\n        this.nextYearLabel = 'Next year';\n        /**\n         * A label for the 'switch to month view' button (used by screen readers).\n         */\n        this.switchToMonthViewLabel = 'Change to month view';\n        /**\n         * A label for the 'switch to year view' button (used by screen readers).\n         */\n        this.switchToYearViewLabel = 'Change to year view';\n    }\n    MatDatepickerIntl.decorators = [\n        { type: Injectable },\n    ];\n    /**\n     * @nocollapse\n     */\n    MatDatepickerIntl.ctorParameters = function () { return []; };\n    return MatDatepickerIntl;\n}());\nexport { MatDatepickerIntl };\nfunction MatDatepickerIntl_tsickle_Closure_declarations() {\n    /** @type {?} */\n    MatDatepickerIntl.decorators;\n    /**\n     * @nocollapse\n     * @type {?}\n     */\n    MatDatepickerIntl.ctorParameters;\n    /**\n     * Stream that emits whenever the labels here are changed. Use this to notify\n     * components if the labels have changed after initialization.\n     * @type {?}\n     */\n    MatDatepickerIntl.prototype.changes;\n    /**\n     * A label for the calendar popup (used by screen readers).\n     * @type {?}\n     */\n    MatDatepickerIntl.prototype.calendarLabel;\n    /**\n     * A label for the button used to open the calendar popup (used by screen readers).\n     * @type {?}\n     */\n    MatDatepickerIntl.prototype.openCalendarLabel;\n    /**\n     * A label for the previous month button (used by screen readers).\n     * @type {?}\n     */\n    MatDatepickerIntl.prototype.prevMonthLabel;\n    /**\n     * A label for the next month button (used by screen readers).\n     * @type {?}\n     */\n    MatDatepickerIntl.prototype.nextMonthLabel;\n    /**\n     * A label for the previous year button (used by screen readers).\n     * @type {?}\n     */\n    MatDatepickerIntl.prototype.prevYearLabel;\n    /**\n     * A label for the next year button (used by screen readers).\n     * @type {?}\n     */\n    MatDatepickerIntl.prototype.nextYearLabel;\n    /**\n     * A label for the 'switch to month view' button (used by screen readers).\n     * @type {?}\n     */\n    MatDatepickerIntl.prototype.switchToMonthViewLabel;\n    /**\n     * A label for the 'switch to year view' button (used by screen readers).\n     * @type {?}\n     */\n    MatDatepickerIntl.prototype.switchToYearViewLabel;\n}\n//# sourceMappingURL=datepicker-intl.js.map","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * \\@docs-private\n */\nvar MatCalendarCell = (function () {\n    /**\n     * @param {?} value\n     * @param {?} displayValue\n     * @param {?} ariaLabel\n     * @param {?} enabled\n     */\n    function MatCalendarCell(value, displayValue, ariaLabel, enabled) {\n        this.value = value;\n        this.displayValue = displayValue;\n        this.ariaLabel = ariaLabel;\n        this.enabled = enabled;\n    }\n    return MatCalendarCell;\n}());\nexport { MatCalendarCell };\nfunction MatCalendarCell_tsickle_Closure_declarations() {\n    /** @type {?} */\n    MatCalendarCell.prototype.value;\n    /** @type {?} */\n    MatCalendarCell.prototype.displayValue;\n    /** @type {?} */\n    MatCalendarCell.prototype.ariaLabel;\n    /** @type {?} */\n    MatCalendarCell.prototype.enabled;\n}\n/**\n * An internal component used to display calendar data in a table.\n * \\@docs-private\n */\nvar MatCalendarBody = (function () {\n    function MatCalendarBody() {\n        /**\n         * The number of columns in the table.\n         */\n        this.numCols = 7;\n        /**\n         * Whether to allow selection of disabled cells.\n         */\n        this.allowDisabledSelection = false;\n        /**\n         * The cell number of the active cell in the table.\n         */\n        this.activeCell = 0;\n        /**\n         * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n         * maintained even as the table resizes.\n         */\n        this.cellAspectRatio = 1;\n        /**\n         * Emits when a new value is selected.\n         */\n        this.selectedValueChange = new EventEmitter();\n    }\n    /**\n     * @param {?} cell\n     * @return {?}\n     */\n    MatCalendarBody.prototype._cellClicked = function (cell) {\n        if (!this.allowDisabledSelection && !cell.enabled) {\n            return;\n        }\n        this.selectedValueChange.emit(cell.value);\n    };\n    Object.defineProperty(MatCalendarBody.prototype, \"_firstRowOffset\", {\n        /**\n         * The number of blank cells to put at the beginning for the first row.\n         * @return {?}\n         */\n        get: function () {\n            return this.rows && this.rows.length && this.rows[0].length ?\n                this.numCols - this.rows[0].length : 0;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} rowIndex\n     * @param {?} colIndex\n     * @return {?}\n     */\n    MatCalendarBody.prototype._isActiveCell = function (rowIndex, colIndex) {\n        var /** @type {?} */ cellNumber = rowIndex * this.numCols + colIndex;\n        // Account for the fact that the first row may not have as many cells.\n        if (rowIndex) {\n            cellNumber -= this._firstRowOffset;\n        }\n        return cellNumber == this.activeCell;\n    };\n    MatCalendarBody.decorators = [\n        { type: Component, args: [{selector: '[mat-calendar-body]',\n                    template: \"<tr *ngIf=\\\"_firstRowOffset < labelMinRequiredCells\\\" aria-hidden=\\\"true\\\"><td class=\\\"mat-calendar-body-label\\\" [attr.colspan]=\\\"numCols\\\" [style.paddingTop.%]=\\\"50 * cellAspectRatio / numCols\\\" [style.paddingBottom.%]=\\\"50 * cellAspectRatio / numCols\\\">{{label}}</td></tr><tr *ngFor=\\\"let row of rows; let rowIndex = index\\\" role=\\\"row\\\"><td *ngIf=\\\"rowIndex === 0 && _firstRowOffset\\\" aria-hidden=\\\"true\\\" class=\\\"mat-calendar-body-label\\\" [attr.colspan]=\\\"_firstRowOffset\\\" [style.paddingTop.%]=\\\"50 * cellAspectRatio / numCols\\\" [style.paddingBottom.%]=\\\"50 * cellAspectRatio / numCols\\\">{{_firstRowOffset >= labelMinRequiredCells ? label : ''}}</td><td *ngFor=\\\"let item of row; let colIndex = index\\\" role=\\\"gridcell\\\" class=\\\"mat-calendar-body-cell\\\" [tabindex]=\\\"_isActiveCell(rowIndex, colIndex) ? 0 : -1\\\" [class.mat-calendar-body-disabled]=\\\"!item.enabled\\\" [class.mat-calendar-body-active]=\\\"_isActiveCell(rowIndex, colIndex)\\\" [attr.aria-label]=\\\"item.ariaLabel\\\" [attr.aria-disabled]=\\\"!item.enabled || null\\\" (click)=\\\"_cellClicked(item)\\\" [style.width.%]=\\\"100 / numCols\\\" [style.paddingTop.%]=\\\"50 * cellAspectRatio / numCols\\\" [style.paddingBottom.%]=\\\"50 * cellAspectRatio / numCols\\\"><div class=\\\"mat-calendar-body-cell-content\\\" [class.mat-calendar-body-selected]=\\\"selectedValue === item.value\\\" [class.mat-calendar-body-today]=\\\"todayValue === item.value\\\">{{item.displayValue}}</div></td></tr>\",\n                    styles: [\".mat-calendar-body{min-width:224px}.mat-calendar-body-label{height:0;line-height:0;text-align:left;padding-left:4.71429%;padding-right:4.71429%}.mat-calendar-body-cell{position:relative;height:0;line-height:0;text-align:center;outline:0;cursor:pointer}.mat-calendar-body-disabled{cursor:default}.mat-calendar-body-cell-content{position:absolute;top:5%;left:5%;display:flex;align-items:center;justify-content:center;box-sizing:border-box;width:90%;height:90%;line-height:1;border-width:1px;border-style:solid;border-radius:999px}[dir=rtl] .mat-calendar-body-label{text-align:right}\"],\n                    host: {\n                        'class': 'mat-calendar-body',\n                    },\n                    encapsulation: ViewEncapsulation.None,\n                    preserveWhitespaces: false,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                },] },\n    ];\n    /**\n     * @nocollapse\n     */\n    MatCalendarBody.ctorParameters = function () { return []; };\n    MatCalendarBody.propDecorators = {\n        'label': [{ type: Input },],\n        'rows': [{ type: Input },],\n        'todayValue': [{ type: Input },],\n        'selectedValue': [{ type: Input },],\n        'labelMinRequiredCells': [{ type: Input },],\n        'numCols': [{ type: Input },],\n        'allowDisabledSelection': [{ type: Input },],\n        'activeCell': [{ type: Input },],\n        'cellAspectRatio': [{ type: Input },],\n        'selectedValueChange': [{ type: Output },],\n    };\n    return MatCalendarBody;\n}());\nexport { MatCalendarBody };\nfunction MatCalendarBody_tsickle_Closure_declarations() {\n    /** @type {?} */\n    MatCalendarBody.decorators;\n    /**\n     * @nocollapse\n     * @type {?}\n     */\n    MatCalendarBody.ctorParameters;\n    /** @type {?} */\n    MatCalendarBody.propDecorators;\n    /**\n     * The label for the table. (e.g. \"Jan 2017\").\n     * @type {?}\n     */\n    MatCalendarBody.prototype.label;\n    /**\n     * The cells to display in the table.\n     * @type {?}\n     */\n    MatCalendarBody.prototype.rows;\n    /**\n     * The value in the table that corresponds to today.\n     * @type {?}\n     */\n    MatCalendarBody.prototype.todayValue;\n    /**\n     * The value in the table that is currently selected.\n     * @type {?}\n     */\n    MatCalendarBody.prototype.selectedValue;\n    /**\n     * The minimum number of free cells needed to fit the label in the first row.\n     * @type {?}\n     */\n    MatCalendarBody.prototype.labelMinRequiredCells;\n    /**\n     * The number of columns in the table.\n     * @type {?}\n     */\n    MatCalendarBody.prototype.numCols;\n    /**\n     * Whether to allow selection of disabled cells.\n     * @type {?}\n     */\n    MatCalendarBody.prototype.allowDisabledSelection;\n    /**\n     * The cell number of the active cell in the table.\n     * @type {?}\n     */\n    MatCalendarBody.prototype.activeCell;\n    /**\n     * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n     * maintained even as the table resizes.\n     * @type {?}\n     */\n    MatCalendarBody.prototype.cellAspectRatio;\n    /**\n     * Emits when a new value is selected.\n     * @type {?}\n     */\n    MatCalendarBody.prototype.selectedValueChange;\n}\n//# sourceMappingURL=calendar-body.js.map","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ChangeDetectionStrategy, Component, EventEmitter, Inject, Input, Optional, Output, ViewEncapsulation, ChangeDetectorRef, } from '@angular/core';\nimport { DateAdapter, MAT_DATE_FORMATS } from '@angular/material/core';\nimport { MatCalendarCell } from './calendar-body';\nimport { coerceDateProperty } from './coerce-date-property';\nimport { createMissingDateImplError } from './datepicker-errors';\nvar /** @type {?} */ DAYS_PER_WEEK = 7;\n/**\n * An internal component used to display a single month in the datepicker.\n * \\@docs-private\n */\nvar MatMonthView = (function () {\n    /**\n     * @param {?} _dateAdapter\n     * @param {?} _dateFormats\n     * @param {?} _changeDetectorRef\n     */\n    function MatMonthView(_dateAdapter, _dateFormats, _changeDetectorRef) {\n        this._dateAdapter = _dateAdapter;\n        this._dateFormats = _dateFormats;\n        this._changeDetectorRef = _changeDetectorRef;\n        /**\n         * Emits when a new date is selected.\n         */\n        this.selectedChange = new EventEmitter();\n        /**\n         * Emits when any date is selected.\n         */\n        this._userSelection = new EventEmitter();\n        if (!this._dateAdapter) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n        if (!this._dateFormats) {\n            throw createMissingDateImplError('MAT_DATE_FORMATS');\n        }\n        var firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n        var narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n        var longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n        // Rotate the labels for days of the week based on the configured first day of the week.\n        var weekdays = longWeekdays.map(function (long, i) {\n            return { long: long, narrow: narrowWeekdays[i] };\n        });\n        this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n        this._activeDate = this._dateAdapter.today();\n    }\n    Object.defineProperty(MatMonthView.prototype, \"activeDate\", {\n        /**\n         * The date to display in this month view (everything other than the month and year is ignored).\n         * @return {?}\n         */\n        get: function () { return this._activeDate; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            var /** @type {?} */ oldActiveDate = this._activeDate;\n            this._activeDate = coerceDateProperty(this._dateAdapter, value) || this._dateAdapter.today();\n            if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n                this._init();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatMonthView.prototype, \"selected\", {\n        /**\n         * The currently selected date.\n         * @return {?}\n         */\n        get: function () { return this._selected; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this._selected = coerceDateProperty(this._dateAdapter, value);\n            this._selectedDate = this._getDateInCurrentMonth(this._selected);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MatMonthView.prototype.ngAfterContentInit = function () {\n        this._init();\n    };\n    /**\n     * Handles when a new date is selected.\n     * @param {?} date\n     * @return {?}\n     */\n    MatMonthView.prototype._dateSelected = function (date) {\n        if (this._selectedDate != date) {\n            var /** @type {?} */ selectedYear = this._dateAdapter.getYear(this.activeDate);\n            var /** @type {?} */ selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n            var /** @type {?} */ selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n            this.selectedChange.emit(selectedDate);\n        }\n        this._userSelection.emit();\n    };\n    /**\n     * Initializes this month view.\n     * @return {?}\n     */\n    MatMonthView.prototype._init = function () {\n        this._selectedDate = this._getDateInCurrentMonth(this.selected);\n        this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n        this._monthLabel =\n            this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n                .toLocaleUpperCase();\n        var /** @type {?} */ firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), this._dateAdapter.getMonth(this.activeDate), 1);\n        this._firstWeekOffset =\n            (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n                this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n        this._createWeekCells();\n        this._changeDetectorRef.markForCheck();\n    };\n    /**\n     * Creates MatCalendarCells for the dates in this month.\n     * @return {?}\n     */\n    MatMonthView.prototype._createWeekCells = function () {\n        var /** @type {?} */ daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n        var /** @type {?} */ dateNames = this._dateAdapter.getDateNames();\n        this._weeks = [[]];\n        for (var /** @type {?} */ i = 0, /** @type {?} */ cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n            if (cell == DAYS_PER_WEEK) {\n                this._weeks.push([]);\n                cell = 0;\n            }\n            var /** @type {?} */ date = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), this._dateAdapter.getMonth(this.activeDate), i + 1);\n            var /** @type {?} */ enabled = !this.dateFilter ||\n                this.dateFilter(date);\n            var /** @type {?} */ ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n            this._weeks[this._weeks.length - 1]\n                .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\n        }\n    };\n    /**\n     * Gets the date in this month that the given Date falls on.\n     * Returns null if the given Date is in another month.\n     * @param {?} date\n     * @return {?}\n     */\n    MatMonthView.prototype._getDateInCurrentMonth = function (date) {\n        return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n            this._dateAdapter.getDate(date) : null;\n    };\n    /**\n     * Checks whether the 2 dates are non-null and fall within the same month of the same year.\n     * @param {?} d1\n     * @param {?} d2\n     * @return {?}\n     */\n    MatMonthView.prototype._hasSameMonthAndYear = function (d1, d2) {\n        return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n            this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n    };\n    MatMonthView.decorators = [\n        { type: Component, args: [{selector: 'mat-month-view',\n                    template: \"<table class=\\\"mat-calendar-table\\\"><thead class=\\\"mat-calendar-table-header\\\"><tr><th *ngFor=\\\"let day of _weekdays\\\" [attr.aria-label]=\\\"day.long\\\">{{day.narrow}}</th></tr><tr><th class=\\\"mat-calendar-table-header-divider\\\" colspan=\\\"7\\\" aria-hidden=\\\"true\\\"></th></tr></thead><tbody mat-calendar-body role=\\\"grid\\\" [label]=\\\"_monthLabel\\\" [rows]=\\\"_weeks\\\" [todayValue]=\\\"_todayDate\\\" [selectedValue]=\\\"_selectedDate\\\" [labelMinRequiredCells]=\\\"3\\\" [activeCell]=\\\"_dateAdapter.getDate(activeDate) - 1\\\" (selectedValueChange)=\\\"_dateSelected($event)\\\"></tbody></table>\",\n                    encapsulation: ViewEncapsulation.None,\n                    preserveWhitespaces: false,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                },] },\n    ];\n    /**\n     * @nocollapse\n     */\n    MatMonthView.ctorParameters = function () { return [\n        { type: DateAdapter, decorators: [{ type: Optional },] },\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DATE_FORMATS,] },] },\n        { type: ChangeDetectorRef, },\n    ]; };\n    MatMonthView.propDecorators = {\n        'activeDate': [{ type: Input },],\n        'selected': [{ type: Input },],\n        'dateFilter': [{ type: Input },],\n        'selectedChange': [{ type: Output },],\n        '_userSelection': [{ type: Output },],\n    };\n    return MatMonthView;\n}());\nexport { MatMonthView };\nfunction MatMonthView_tsickle_Closure_declarations() {\n    /** @type {?} */\n    MatMonthView.decorators;\n    /**\n     * @nocollapse\n     * @type {?}\n     */\n    MatMonthView.ctorParameters;\n    /** @type {?} */\n    MatMonthView.propDecorators;\n    /** @type {?} */\n    MatMonthView.prototype._activeDate;\n    /** @type {?} */\n    MatMonthView.prototype._selected;\n    /**\n     * A function used to filter which dates are selectable.\n     * @type {?}\n     */\n    MatMonthView.prototype.dateFilter;\n    /**\n     * Emits when a new date is selected.\n     * @type {?}\n     */\n    MatMonthView.prototype.selectedChange;\n    /**\n     * Emits when any date is selected.\n     * @type {?}\n     */\n    MatMonthView.prototype._userSelection;\n    /**\n     * The label for this month (e.g. \"January 2017\").\n     * @type {?}\n     */\n    MatMonthView.prototype._monthLabel;\n    /**\n     * Grid of calendar cells representing the dates of the month.\n     * @type {?}\n     */\n    MatMonthView.prototype._weeks;\n    /**\n     * The number of blank cells in the first row before the 1st of the month.\n     * @type {?}\n     */\n    MatMonthView.prototype._firstWeekOffset;\n    /**\n     * The date of the month that the currently selected Date falls on.\n     * Null if the currently selected Date is in another month.\n     * @type {?}\n     */\n    MatMonthView.prototype._selectedDate;\n    /**\n     * The date of the month that today falls on. Null if today is in another month.\n     * @type {?}\n     */\n    MatMonthView.prototype._todayDate;\n    /**\n     * The names of the weekdays.\n     * @type {?}\n     */\n    MatMonthView.prototype._weekdays;\n    /** @type {?} */\n    MatMonthView.prototype._dateAdapter;\n    /** @type {?} */\n    MatMonthView.prototype._dateFormats;\n    /** @type {?} */\n    MatMonthView.prototype._changeDetectorRef;\n}\n//# sourceMappingURL=month-view.js.map","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ChangeDetectionStrategy, Component, EventEmitter, Inject, Input, Optional, Output, ViewEncapsulation, ChangeDetectorRef, } from '@angular/core';\nimport { DateAdapter, MAT_DATE_FORMATS } from '@angular/material/core';\nimport { MatCalendarCell } from './calendar-body';\nimport { coerceDateProperty } from './coerce-date-property';\nimport { createMissingDateImplError } from './datepicker-errors';\n/**\n * An internal component used to display a single year in the datepicker.\n * \\@docs-private\n */\nvar MatYearView = (function () {\n    /**\n     * @param {?} _dateAdapter\n     * @param {?} _dateFormats\n     * @param {?} _changeDetectorRef\n     */\n    function MatYearView(_dateAdapter, _dateFormats, _changeDetectorRef) {\n        this._dateAdapter = _dateAdapter;\n        this._dateFormats = _dateFormats;\n        this._changeDetectorRef = _changeDetectorRef;\n        /**\n         * Emits when a new month is selected.\n         */\n        this.selectedChange = new EventEmitter();\n        if (!this._dateAdapter) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n        if (!this._dateFormats) {\n            throw createMissingDateImplError('MAT_DATE_FORMATS');\n        }\n        this._activeDate = this._dateAdapter.today();\n    }\n    Object.defineProperty(MatYearView.prototype, \"activeDate\", {\n        /**\n         * The date to display in this year view (everything other than the year is ignored).\n         * @return {?}\n         */\n        get: function () { return this._activeDate; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            var /** @type {?} */ oldActiveDate = this._activeDate;\n            this._activeDate = coerceDateProperty(this._dateAdapter, value) || this._dateAdapter.today();\n            if (this._dateAdapter.getYear(oldActiveDate) != this._dateAdapter.getYear(this._activeDate)) {\n                this._init();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatYearView.prototype, \"selected\", {\n        /**\n         * The currently selected date.\n         * @return {?}\n         */\n        get: function () { return this._selected; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this._selected = coerceDateProperty(this._dateAdapter, value);\n            this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MatYearView.prototype.ngAfterContentInit = function () {\n        this._init();\n    };\n    /**\n     * Handles when a new month is selected.\n     * @param {?} month\n     * @return {?}\n     */\n    MatYearView.prototype._monthSelected = function (month) {\n        var /** @type {?} */ daysInMonth = this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1));\n        this.selectedChange.emit(this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n    };\n    /**\n     * Initializes this month view.\n     * @return {?}\n     */\n    MatYearView.prototype._init = function () {\n        var _this = this;\n        this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n        this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n        this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n        var /** @type {?} */ monthNames = this._dateAdapter.getMonthNames('short');\n        // First row of months only contains 5 elements so we can fit the year label on the same row.\n        this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(function (row) { return row.map(function (month) { return _this._createCellForMonth(month, monthNames[month]); }); });\n        this._changeDetectorRef.markForCheck();\n    };\n    /**\n     * Gets the month in this year that the given Date falls on.\n     * Returns null if the given Date is in another year.\n     * @param {?} date\n     * @return {?}\n     */\n    MatYearView.prototype._getMonthInCurrentYear = function (date) {\n        return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n            this._dateAdapter.getMonth(date) : null;\n    };\n    /**\n     * Creates an MatCalendarCell for the given month.\n     * @param {?} month\n     * @param {?} monthName\n     * @return {?}\n     */\n    MatYearView.prototype._createCellForMonth = function (month, monthName) {\n        var /** @type {?} */ ariaLabel = this._dateAdapter.format(this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1), this._dateFormats.display.monthYearA11yLabel);\n        return new MatCalendarCell(month, monthName.toLocaleUpperCase(), ariaLabel, this._isMonthEnabled(month));\n    };\n    /**\n     * Whether the given month is enabled.\n     * @param {?} month\n     * @return {?}\n     */\n    MatYearView.prototype._isMonthEnabled = function (month) {\n        if (!this.dateFilter) {\n            return true;\n        }\n        var /** @type {?} */ firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n        // If any date in the month is enabled count the month as enabled.\n        for (var /** @type {?} */ date = firstOfMonth; this._dateAdapter.getMonth(date) == month; date = this._dateAdapter.addCalendarDays(date, 1)) {\n            if (this.dateFilter(date)) {\n                return true;\n            }\n        }\n        return false;\n    };\n    MatYearView.decorators = [\n        { type: Component, args: [{selector: 'mat-year-view',\n                    template: \"<table class=\\\"mat-calendar-table\\\"><thead class=\\\"mat-calendar-table-header\\\"><tr><th class=\\\"mat-calendar-table-header-divider\\\" colspan=\\\"4\\\"></th></tr></thead><tbody mat-calendar-body role=\\\"grid\\\" allowDisabledSelection=\\\"true\\\" [label]=\\\"_yearLabel\\\" [rows]=\\\"_months\\\" [todayValue]=\\\"_todayMonth\\\" [selectedValue]=\\\"_selectedMonth\\\" [labelMinRequiredCells]=\\\"2\\\" [numCols]=\\\"4\\\" [cellAspectRatio]=\\\"4 / 7\\\" [activeCell]=\\\"_dateAdapter.getMonth(activeDate)\\\" (selectedValueChange)=\\\"_monthSelected($event)\\\"></tbody></table>\",\n                    encapsulation: ViewEncapsulation.None,\n                    preserveWhitespaces: false,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                },] },\n    ];\n    /**\n     * @nocollapse\n     */\n    MatYearView.ctorParameters = function () { return [\n        { type: DateAdapter, decorators: [{ type: Optional },] },\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DATE_FORMATS,] },] },\n        { type: ChangeDetectorRef, },\n    ]; };\n    MatYearView.propDecorators = {\n        'activeDate': [{ type: Input },],\n        'selected': [{ type: Input },],\n        'dateFilter': [{ type: Input },],\n        'selectedChange': [{ type: Output },],\n    };\n    return MatYearView;\n}());\nexport { MatYearView };\nfunction MatYearView_tsickle_Closure_declarations() {\n    /** @type {?} */\n    MatYearView.decorators;\n    /**\n     * @nocollapse\n     * @type {?}\n     */\n    MatYearView.ctorParameters;\n    /** @type {?} */\n    MatYearView.propDecorators;\n    /** @type {?} */\n    MatYearView.prototype._activeDate;\n    /** @type {?} */\n    MatYearView.prototype._selected;\n    /**\n     * A function used to filter which dates are selectable.\n     * @type {?}\n     */\n    MatYearView.prototype.dateFilter;\n    /**\n     * Emits when a new month is selected.\n     * @type {?}\n     */\n    MatYearView.prototype.selectedChange;\n    /**\n     * Grid of calendar cells representing the months of the year.\n     * @type {?}\n     */\n    MatYearView.prototype._months;\n    /**\n     * The label for this year (e.g. \"2017\").\n     * @type {?}\n     */\n    MatYearView.prototype._yearLabel;\n    /**\n     * The month in this year that today falls on. Null if today is in a different year.\n     * @type {?}\n     */\n    MatYearView.prototype._todayMonth;\n    /**\n     * The month in this year that the selected Date falls on.\n     * Null if the selected Date is in a different year.\n     * @type {?}\n     */\n    MatYearView.prototype._selectedMonth;\n    /** @type {?} */\n    MatYearView.prototype._dateAdapter;\n    /** @type {?} */\n    MatYearView.prototype._dateFormats;\n    /** @type {?} */\n    MatYearView.prototype._changeDetectorRef;\n}\n//# sourceMappingURL=year-view.js.map","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { DOWN_ARROW, END, ENTER, HOME, LEFT_ARROW, PAGE_DOWN, PAGE_UP, RIGHT_ARROW, UP_ARROW, } from '@angular/cdk/keycodes';\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, EventEmitter, Inject, Input, NgZone, Optional, Output, ViewEncapsulation, ViewChild, } from '@angular/core';\nimport { DateAdapter, MAT_DATE_FORMATS } from '@angular/material/core';\nimport { first } from 'rxjs/operator/first';\nimport { coerceDateProperty } from './coerce-date-property';\nimport { createMissingDateImplError } from './datepicker-errors';\nimport { MatDatepickerIntl } from './datepicker-intl';\nimport { MatMonthView } from './month-view';\nimport { MatYearView } from './year-view';\n/**\n * A calendar that is used as part of the datepicker.\n * \\@docs-private\n */\nvar MatCalendar = (function () {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _intl\n     * @param {?} _ngZone\n     * @param {?} _dateAdapter\n     * @param {?} _dateFormats\n     * @param {?} changeDetectorRef\n     */\n    function MatCalendar(_elementRef, _intl, _ngZone, _dateAdapter, _dateFormats, changeDetectorRef) {\n        var _this = this;\n        this._elementRef = _elementRef;\n        this._intl = _intl;\n        this._ngZone = _ngZone;\n        this._dateAdapter = _dateAdapter;\n        this._dateFormats = _dateFormats;\n        /**\n         * Whether the calendar should be started in month or year view.\n         */\n        this.startView = 'month';\n        /**\n         * Emits when the currently selected date changes.\n         */\n        this.selectedChange = new EventEmitter();\n        /**\n         * Emits when any date is selected.\n         */\n        this._userSelection = new EventEmitter();\n        /**\n         * Date filter for the month and year views.\n         */\n        this._dateFilterForViews = function (date) {\n            return !!date &&\n                (!_this.dateFilter || _this.dateFilter(date)) &&\n                (!_this.minDate || _this._dateAdapter.compareDate(date, _this.minDate) >= 0) &&\n                (!_this.maxDate || _this._dateAdapter.compareDate(date, _this.maxDate) <= 0);\n        };\n        if (!this._dateAdapter) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n        if (!this._dateFormats) {\n            throw createMissingDateImplError('MAT_DATE_FORMATS');\n        }\n        this._intlChanges = _intl.changes.subscribe(function () { return changeDetectorRef.markForCheck(); });\n    }\n    Object.defineProperty(MatCalendar.prototype, \"startAt\", {\n        /**\n         * A date representing the period (month or year) to start the calendar in.\n         * @return {?}\n         */\n        get: function () { return this._startAt; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) { this._startAt = coerceDateProperty(this._dateAdapter, value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatCalendar.prototype, \"selected\", {\n        /**\n         * The currently selected date.\n         * @return {?}\n         */\n        get: function () { return this._selected; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) { this._selected = coerceDateProperty(this._dateAdapter, value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatCalendar.prototype, \"minDate\", {\n        /**\n         * The minimum selectable date.\n         * @return {?}\n         */\n        get: function () { return this._minDate; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) { this._minDate = coerceDateProperty(this._dateAdapter, value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatCalendar.prototype, \"maxDate\", {\n        /**\n         * The maximum selectable date.\n         * @return {?}\n         */\n        get: function () { return this._maxDate; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) { this._maxDate = coerceDateProperty(this._dateAdapter, value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatCalendar.prototype, \"_activeDate\", {\n        /**\n         * The current active date. This determines which time period is shown and which date is\n         * highlighted when using keyboard navigation.\n         * @return {?}\n         */\n        get: function () { return this._clampedActiveDate; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatCalendar.prototype, \"_periodButtonText\", {\n        /**\n         * The label for the current calendar view.\n         * @return {?}\n         */\n        get: function () {\n            return this._monthView ?\n                this._dateAdapter.format(this._activeDate, this._dateFormats.display.monthYearLabel)\n                    .toLocaleUpperCase() :\n                this._dateAdapter.getYearName(this._activeDate);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatCalendar.prototype, \"_periodButtonLabel\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return this._monthView ? this._intl.switchToYearViewLabel : this._intl.switchToMonthViewLabel;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatCalendar.prototype, \"_prevButtonLabel\", {\n        /**\n         * The label for the the previous button.\n         * @return {?}\n         */\n        get: function () {\n            return this._monthView ? this._intl.prevMonthLabel : this._intl.prevYearLabel;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatCalendar.prototype, \"_nextButtonLabel\", {\n        /**\n         * The label for the the next button.\n         * @return {?}\n         */\n        get: function () {\n            return this._monthView ? this._intl.nextMonthLabel : this._intl.nextYearLabel;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MatCalendar.prototype.ngAfterContentInit = function () {\n        this._activeDate = this.startAt || this._dateAdapter.today();\n        this._focusActiveCell();\n        this._monthView = this.startView != 'year';\n    };\n    /**\n     * @return {?}\n     */\n    MatCalendar.prototype.ngOnDestroy = function () {\n        this._intlChanges.unsubscribe();\n    };\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    MatCalendar.prototype.ngOnChanges = function (changes) {\n        var /** @type {?} */ change = changes.minDate || changes.maxDate || changes.dateFilter;\n        if (change && !change.firstChange) {\n            var /** @type {?} */ view = this.monthView || this.yearView;\n            if (view) {\n                view._init();\n            }\n        }\n    };\n    /**\n     * Handles date selection in the month view.\n     * @param {?} date\n     * @return {?}\n     */\n    MatCalendar.prototype._dateSelected = function (date) {\n        if (!this._dateAdapter.sameDate(date, this.selected)) {\n            this.selectedChange.emit(date);\n        }\n    };\n    /**\n     * @return {?}\n     */\n    MatCalendar.prototype._userSelected = function () {\n        this._userSelection.emit();\n    };\n    /**\n     * Handles month selection in the year view.\n     * @param {?} month\n     * @return {?}\n     */\n    MatCalendar.prototype._monthSelected = function (month) {\n        this._activeDate = month;\n        this._monthView = true;\n    };\n    /**\n     * Handles user clicks on the period label.\n     * @return {?}\n     */\n    MatCalendar.prototype._currentPeriodClicked = function () {\n        this._monthView = !this._monthView;\n    };\n    /**\n     * Handles user clicks on the previous button.\n     * @return {?}\n     */\n    MatCalendar.prototype._previousClicked = function () {\n        this._activeDate = this._monthView ?\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1) :\n            this._dateAdapter.addCalendarYears(this._activeDate, -1);\n    };\n    /**\n     * Handles user clicks on the next button.\n     * @return {?}\n     */\n    MatCalendar.prototype._nextClicked = function () {\n        this._activeDate = this._monthView ?\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1) :\n            this._dateAdapter.addCalendarYears(this._activeDate, 1);\n    };\n    /**\n     * Whether the previous period button is enabled.\n     * @return {?}\n     */\n    MatCalendar.prototype._previousEnabled = function () {\n        if (!this.minDate) {\n            return true;\n        }\n        return !this.minDate || !this._isSameView(this._activeDate, this.minDate);\n    };\n    /**\n     * Whether the next period button is enabled.\n     * @return {?}\n     */\n    MatCalendar.prototype._nextEnabled = function () {\n        return !this.maxDate || !this._isSameView(this._activeDate, this.maxDate);\n    };\n    /**\n     * Handles keydown events on the calendar body.\n     * @param {?} event\n     * @return {?}\n     */\n    MatCalendar.prototype._handleCalendarBodyKeydown = function (event) {\n        // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n        // disabled ones from being selected. This may not be ideal, we should look into whether\n        // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n        if (this._monthView) {\n            this._handleCalendarBodyKeydownInMonthView(event);\n        }\n        else {\n            this._handleCalendarBodyKeydownInYearView(event);\n        }\n    };\n    /**\n     * Focuses the active cell after the microtask queue is empty.\n     * @return {?}\n     */\n    MatCalendar.prototype._focusActiveCell = function () {\n        var _this = this;\n        this._ngZone.runOutsideAngular(function () {\n            first.call(_this._ngZone.onStable.asObservable()).subscribe(function () {\n                _this._elementRef.nativeElement.querySelector('.mat-calendar-body-active').focus();\n            });\n        });\n    };\n    /**\n     * Whether the two dates represent the same view in the current view mode (month or year).\n     * @param {?} date1\n     * @param {?} date2\n     * @return {?}\n     */\n    MatCalendar.prototype._isSameView = function (date1, date2) {\n        return this._monthView ?\n            this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n                this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2) :\n            this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    };\n    /**\n     * Handles keydown events on the calendar body when calendar is in month view.\n     * @param {?} event\n     * @return {?}\n     */\n    MatCalendar.prototype._handleCalendarBodyKeydownInMonthView = function (event) {\n        switch (event.keyCode) {\n            case LEFT_ARROW:\n                this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -1);\n                break;\n            case RIGHT_ARROW:\n                this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 1);\n                break;\n            case UP_ARROW:\n                this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n                break;\n            case DOWN_ARROW:\n                this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n                break;\n            case HOME:\n                this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 1 - this._dateAdapter.getDate(this._activeDate));\n                break;\n            case END:\n                this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n                    this._dateAdapter.getDate(this._activeDate)));\n                break;\n            case PAGE_UP:\n                this._activeDate = event.altKey ?\n                    this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n                    this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n                break;\n            case PAGE_DOWN:\n                this._activeDate = event.altKey ?\n                    this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n                    this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n                break;\n            case ENTER:\n                if (this._dateFilterForViews(this._activeDate)) {\n                    this._dateSelected(this._activeDate);\n                    // Prevent unexpected default actions such as form submission.\n                    event.preventDefault();\n                }\n                return;\n            default:\n                // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n                return;\n        }\n        this._focusActiveCell();\n        // Prevent unexpected default actions such as form submission.\n        event.preventDefault();\n    };\n    /**\n     * Handles keydown events on the calendar body when calendar is in year view.\n     * @param {?} event\n     * @return {?}\n     */\n    MatCalendar.prototype._handleCalendarBodyKeydownInYearView = function (event) {\n        switch (event.keyCode) {\n            case LEFT_ARROW:\n                this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n                break;\n            case RIGHT_ARROW:\n                this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n                break;\n            case UP_ARROW:\n                this._activeDate = this._prevMonthInSameCol(this._activeDate);\n                break;\n            case DOWN_ARROW:\n                this._activeDate = this._nextMonthInSameCol(this._activeDate);\n                break;\n            case HOME:\n                this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -this._dateAdapter.getMonth(this._activeDate));\n                break;\n            case END:\n                this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 11 - this._dateAdapter.getMonth(this._activeDate));\n                break;\n            case PAGE_UP:\n                this._activeDate =\n                    this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n                break;\n            case PAGE_DOWN:\n                this._activeDate =\n                    this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n                break;\n            case ENTER:\n                this._monthSelected(this._activeDate);\n                break;\n            default:\n                // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n                return;\n        }\n        this._focusActiveCell();\n        // Prevent unexpected default actions such as form submission.\n        event.preventDefault();\n    };\n    /**\n     * Determine the date for the month that comes before the given month in the same column in the\n     * calendar table.\n     * @param {?} date\n     * @return {?}\n     */\n    MatCalendar.prototype._prevMonthInSameCol = function (date) {\n        // Determine how many months to jump forward given that there are 2 empty slots at the beginning\n        // of each year.\n        var /** @type {?} */ increment = this._dateAdapter.getMonth(date) <= 4 ? -5 :\n            (this._dateAdapter.getMonth(date) >= 7 ? -7 : -12);\n        return this._dateAdapter.addCalendarMonths(date, increment);\n    };\n    /**\n     * Determine the date for the month that comes after the given month in the same column in the\n     * calendar table.\n     * @param {?} date\n     * @return {?}\n     */\n    MatCalendar.prototype._nextMonthInSameCol = function (date) {\n        // Determine how many months to jump forward given that there are 2 empty slots at the beginning\n        // of each year.\n        var /** @type {?} */ increment = this._dateAdapter.getMonth(date) <= 4 ? 7 :\n            (this._dateAdapter.getMonth(date) >= 7 ? 5 : 12);\n        return this._dateAdapter.addCalendarMonths(date, increment);\n    };\n    MatCalendar.decorators = [\n        { type: Component, args: [{selector: 'mat-calendar',\n                    template: \"<div class=\\\"mat-calendar-header\\\"><div class=\\\"mat-calendar-controls\\\"><button mat-button class=\\\"mat-calendar-period-button\\\" (click)=\\\"_currentPeriodClicked()\\\" [attr.aria-label]=\\\"_periodButtonLabel\\\">{{_periodButtonText}}<div class=\\\"mat-calendar-arrow\\\" [class.mat-calendar-invert]=\\\"!_monthView\\\"></div></button><div class=\\\"mat-calendar-spacer\\\"></div><button mat-icon-button class=\\\"mat-calendar-previous-button\\\" [disabled]=\\\"!_previousEnabled()\\\" (click)=\\\"_previousClicked()\\\" [attr.aria-label]=\\\"_prevButtonLabel\\\"></button> <button mat-icon-button class=\\\"mat-calendar-next-button\\\" [disabled]=\\\"!_nextEnabled()\\\" (click)=\\\"_nextClicked()\\\" [attr.aria-label]=\\\"_nextButtonLabel\\\"></button></div></div><div class=\\\"mat-calendar-content\\\" (keydown)=\\\"_handleCalendarBodyKeydown($event)\\\" [ngSwitch]=\\\"_monthView\\\" cdkMonitorSubtreeFocus><mat-month-view *ngSwitchCase=\\\"true\\\" [activeDate]=\\\"_activeDate\\\" [selected]=\\\"selected\\\" [dateFilter]=\\\"_dateFilterForViews\\\" (selectedChange)=\\\"_dateSelected($event)\\\" (_userSelection)=\\\"_userSelected()\\\"></mat-month-view><mat-year-view *ngSwitchDefault [activeDate]=\\\"_activeDate\\\" [selected]=\\\"selected\\\" [dateFilter]=\\\"_dateFilterForViews\\\" (selectedChange)=\\\"_monthSelected($event)\\\"></mat-year-view></div>\",\n                    styles: [\".mat-calendar{display:block}.mat-calendar-header{padding:8px 8px 0 8px}.mat-calendar-content{padding:0 8px 8px 8px;outline:0}.mat-calendar-controls{display:flex;margin:5% calc(33% / 7 - 16px)}.mat-calendar-spacer{flex:1 1 auto}.mat-calendar-period-button{min-width:0}.mat-calendar-arrow{display:inline-block;width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top-width:5px;border-top-style:solid;margin:0 0 0 5px;vertical-align:middle}.mat-calendar-arrow.mat-calendar-invert{transform:rotate(180deg)}[dir=rtl] .mat-calendar-arrow{margin:0 5px 0 0}.mat-calendar-next-button,.mat-calendar-previous-button{position:relative}.mat-calendar-next-button::after,.mat-calendar-previous-button::after{top:0;left:0;right:0;bottom:0;position:absolute;content:'';margin:15.5px;border:0 solid currentColor;border-top-width:2px}[dir=rtl] .mat-calendar-next-button,[dir=rtl] .mat-calendar-previous-button{transform:rotate(180deg)}.mat-calendar-previous-button::after{border-left-width:2px;transform:translateX(2px) rotate(-45deg)}.mat-calendar-next-button::after{border-right-width:2px;transform:translateX(-2px) rotate(45deg)}.mat-calendar-table{border-spacing:0;border-collapse:collapse;width:100%}.mat-calendar-table-header th{text-align:center;padding:0 0 8px 0}.mat-calendar-table-header-divider{position:relative;height:1px}.mat-calendar-table-header-divider::after{content:'';position:absolute;top:0;left:-8px;right:-8px;height:1px}\"],\n                    host: {\n                        'class': 'mat-calendar',\n                    },\n                    encapsulation: ViewEncapsulation.None,\n                    preserveWhitespaces: false,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                },] },\n    ];\n    /**\n     * @nocollapse\n     */\n    MatCalendar.ctorParameters = function () { return [\n        { type: ElementRef, },\n        { type: MatDatepickerIntl, },\n        { type: NgZone, },\n        { type: DateAdapter, decorators: [{ type: Optional },] },\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DATE_FORMATS,] },] },\n        { type: ChangeDetectorRef, },\n    ]; };\n    MatCalendar.propDecorators = {\n        'startAt': [{ type: Input },],\n        'startView': [{ type: Input },],\n        'selected': [{ type: Input },],\n        'minDate': [{ type: Input },],\n        'maxDate': [{ type: Input },],\n        'dateFilter': [{ type: Input },],\n        'selectedChange': [{ type: Output },],\n        '_userSelection': [{ type: Output },],\n        'monthView': [{ type: ViewChild, args: [MatMonthView,] },],\n        'yearView': [{ type: ViewChild, args: [MatYearView,] },],\n    };\n    return MatCalendar;\n}());\nexport { MatCalendar };\nfunction MatCalendar_tsickle_Closure_declarations() {\n    /** @type {?} */\n    MatCalendar.decorators;\n    /**\n     * @nocollapse\n     * @type {?}\n     */\n    MatCalendar.ctorParameters;\n    /** @type {?} */\n    MatCalendar.propDecorators;\n    /** @type {?} */\n    MatCalendar.prototype._intlChanges;\n    /** @type {?} */\n    MatCalendar.prototype._startAt;\n    /**\n     * Whether the calendar should be started in month or year view.\n     * @type {?}\n     */\n    MatCalendar.prototype.startView;\n    /** @type {?} */\n    MatCalendar.prototype._selected;\n    /** @type {?} */\n    MatCalendar.prototype._minDate;\n    /** @type {?} */\n    MatCalendar.prototype._maxDate;\n    /**\n     * A function used to filter which dates are selectable.\n     * @type {?}\n     */\n    MatCalendar.prototype.dateFilter;\n    /**\n     * Emits when the currently selected date changes.\n     * @type {?}\n     */\n    MatCalendar.prototype.selectedChange;\n    /**\n     * Emits when any date is selected.\n     * @type {?}\n     */\n    MatCalendar.prototype._userSelection;\n    /**\n     * Reference to the current month view component.\n     * @type {?}\n     */\n    MatCalendar.prototype.monthView;\n    /**\n     * Reference to the current year view component.\n     * @type {?}\n     */\n    MatCalendar.prototype.yearView;\n    /**\n     * Date filter for the month and year views.\n     * @type {?}\n     */\n    MatCalendar.prototype._dateFilterForViews;\n    /** @type {?} */\n    MatCalendar.prototype._clampedActiveDate;\n    /**\n     * Whether the calendar is in month view.\n     * @type {?}\n     */\n    MatCalendar.prototype._monthView;\n    /** @type {?} */\n    MatCalendar.prototype._elementRef;\n    /** @type {?} */\n    MatCalendar.prototype._intl;\n    /** @type {?} */\n    MatCalendar.prototype._ngZone;\n    /** @type {?} */\n    MatCalendar.prototype._dateAdapter;\n    /** @type {?} */\n    MatCalendar.prototype._dateFormats;\n}\n//# sourceMappingURL=calendar.js.map","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ESCAPE } from '@angular/cdk/keycodes';\nimport { Overlay, OverlayConfig, } from '@angular/cdk/overlay';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport { first } from '@angular/cdk/rxjs';\nimport { ChangeDetectionStrategy, Component, EventEmitter, Inject, InjectionToken, Input, NgZone, Optional, Output, ViewChild, ViewContainerRef, ViewEncapsulation, } from '@angular/core';\nimport { DateAdapter } from '@angular/material/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { DOCUMENT } from '@angular/platform-browser';\nimport { Subject } from 'rxjs/Subject';\nimport { Subscription } from 'rxjs/Subscription';\nimport { MatCalendar } from './calendar';\nimport { coerceDateProperty } from './coerce-date-property';\nimport { createMissingDateImplError } from './datepicker-errors';\n/**\n * Used to generate a unique ID for each datepicker instance.\n */\nvar datepickerUid = 0;\n/**\n * Injection token that determines the scroll handling while the calendar is open.\n */\nexport var MAT_DATEPICKER_SCROLL_STRATEGY = new InjectionToken('mat-datepicker-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return function () { return overlay.scrollStrategies.reposition(); };\n}\n/**\n * \\@docs-private\n */\nexport var MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER = {\n    provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * \\@docs-private\n */\nvar MatDatepickerContent = (function () {\n    function MatDatepickerContent() {\n    }\n    /**\n     * @return {?}\n     */\n    MatDatepickerContent.prototype.ngAfterContentInit = function () {\n        this._calendar._focusActiveCell();\n    };\n    /**\n     * Handles keydown event on datepicker content.\n     * @param {?} event The event.\n     * @return {?}\n     */\n    MatDatepickerContent.prototype._handleKeydown = function (event) {\n        if (event.keyCode === ESCAPE) {\n            this.datepicker.close();\n            event.preventDefault();\n            event.stopPropagation();\n        }\n    };\n    MatDatepickerContent.decorators = [\n        { type: Component, args: [{selector: 'mat-datepicker-content',\n                    template: \"<mat-calendar cdkTrapFocus [id]=\\\"datepicker.id\\\" [startAt]=\\\"datepicker.startAt\\\" [startView]=\\\"datepicker.startView\\\" [minDate]=\\\"datepicker._minDate\\\" [maxDate]=\\\"datepicker._maxDate\\\" [dateFilter]=\\\"datepicker._dateFilter\\\" [selected]=\\\"datepicker._selected\\\" (selectedChange)=\\\"datepicker._select($event)\\\" (_userSelection)=\\\"datepicker.close()\\\"></mat-calendar>\",\n                    styles: [\".mat-datepicker-content{box-shadow:0 5px 5px -3px rgba(0,0,0,.2),0 8px 10px 1px rgba(0,0,0,.14),0 3px 14px 2px rgba(0,0,0,.12);display:block}.mat-calendar{width:296px;height:354px}.mat-datepicker-content-touch{box-shadow:0 0 0 0 rgba(0,0,0,.2),0 0 0 0 rgba(0,0,0,.14),0 0 0 0 rgba(0,0,0,.12);display:block;max-height:80vh;overflow:auto;margin:-24px}.mat-datepicker-content-touch .mat-calendar{min-width:250px;min-height:312px;max-width:750px;max-height:788px}@media all and (orientation:landscape){.mat-datepicker-content-touch .mat-calendar{width:64vh;height:80vh}}@media all and (orientation:portrait){.mat-datepicker-content-touch .mat-calendar{width:80vw;height:100vw}}\"],\n                    host: {\n                        'class': 'mat-datepicker-content',\n                        '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n                        '(keydown)': '_handleKeydown($event)',\n                    },\n                    encapsulation: ViewEncapsulation.None,\n                    preserveWhitespaces: false,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                },] },\n    ];\n    /**\n     * @nocollapse\n     */\n    MatDatepickerContent.ctorParameters = function () { return []; };\n    MatDatepickerContent.propDecorators = {\n        '_calendar': [{ type: ViewChild, args: [MatCalendar,] },],\n    };\n    return MatDatepickerContent;\n}());\nexport { MatDatepickerContent };\nfunction MatDatepickerContent_tsickle_Closure_declarations() {\n    /** @type {?} */\n    MatDatepickerContent.decorators;\n    /**\n     * @nocollapse\n     * @type {?}\n     */\n    MatDatepickerContent.ctorParameters;\n    /** @type {?} */\n    MatDatepickerContent.propDecorators;\n    /** @type {?} */\n    MatDatepickerContent.prototype.datepicker;\n    /** @type {?} */\n    MatDatepickerContent.prototype._calendar;\n}\n/**\n * Component responsible for managing the datepicker popup/dialog.\n */\nvar MatDatepicker = (function () {\n    /**\n     * @param {?} _dialog\n     * @param {?} _overlay\n     * @param {?} _ngZone\n     * @param {?} _viewContainerRef\n     * @param {?} _scrollStrategy\n     * @param {?} _dateAdapter\n     * @param {?} _dir\n     * @param {?} _document\n     */\n    function MatDatepicker(_dialog, _overlay, _ngZone, _viewContainerRef, _scrollStrategy, _dateAdapter, _dir, _document) {\n        this._dialog = _dialog;\n        this._overlay = _overlay;\n        this._ngZone = _ngZone;\n        this._viewContainerRef = _viewContainerRef;\n        this._scrollStrategy = _scrollStrategy;\n        this._dateAdapter = _dateAdapter;\n        this._dir = _dir;\n        this._document = _document;\n        /**\n         * The view that the calendar should start in.\n         */\n        this.startView = 'month';\n        /**\n         * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n         * than a popup and elements have more padding to allow for bigger touch targets.\n         */\n        this.touchUi = false;\n        /**\n         * Emits new selected date when selected date changes.\n         * @deprecated Switch to the `dateChange` and `dateInput` binding on the input element.\n         */\n        this.selectedChanged = new EventEmitter();\n        /**\n         * Whether the calendar is open.\n         */\n        this.opened = false;\n        /**\n         * The id for the datepicker calendar.\n         */\n        this.id = \"mat-datepicker-\" + datepickerUid++;\n        this._validSelected = null;\n        /**\n         * The element that was focused before the datepicker was opened.\n         */\n        this._focusedElementBeforeOpen = null;\n        this._inputSubscription = Subscription.EMPTY;\n        /**\n         * Emits when the datepicker is disabled.\n         */\n        this._disabledChange = new Subject();\n        if (!this._dateAdapter) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n    }\n    Object.defineProperty(MatDatepicker.prototype, \"startAt\", {\n        /**\n         * The date to open the calendar to initially.\n         * @return {?}\n         */\n        get: function () {\n            // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n            // selected value is.\n            return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n        },\n        /**\n         * @param {?} date\n         * @return {?}\n         */\n        set: function (date) { this._startAt = coerceDateProperty(this._dateAdapter, date); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatDatepicker.prototype, \"disabled\", {\n        /**\n         * Whether the datepicker pop-up should be disabled.\n         * @return {?}\n         */\n        get: function () {\n            return this._disabled === undefined && this._datepickerInput ?\n                this._datepickerInput.disabled : this._disabled;\n        },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            var /** @type {?} */ newValue = coerceBooleanProperty(value);\n            if (newValue !== this._disabled) {\n                this._disabled = newValue;\n                this._disabledChange.next(newValue);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatDatepicker.prototype, \"_selected\", {\n        /**\n         * The currently selected date.\n         * @return {?}\n         */\n        get: function () { return this._validSelected; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) { this._validSelected = value; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatDatepicker.prototype, \"_minDate\", {\n        /**\n         * The minimum selectable date.\n         * @return {?}\n         */\n        get: function () {\n            return this._datepickerInput && this._datepickerInput.min;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatDatepicker.prototype, \"_maxDate\", {\n        /**\n         * The maximum selectable date.\n         * @return {?}\n         */\n        get: function () {\n            return this._datepickerInput && this._datepickerInput.max;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatDatepicker.prototype, \"_dateFilter\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return this._datepickerInput && this._datepickerInput._dateFilter;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MatDatepicker.prototype.ngOnDestroy = function () {\n        this.close();\n        this._inputSubscription.unsubscribe();\n        this._disabledChange.complete();\n        if (this._popupRef) {\n            this._popupRef.dispose();\n        }\n    };\n    /**\n     * Selects the given date\n     * @param {?} date\n     * @return {?}\n     */\n    MatDatepicker.prototype._select = function (date) {\n        var /** @type {?} */ oldValue = this._selected;\n        this._selected = date;\n        if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n            this.selectedChanged.emit(date);\n        }\n    };\n    /**\n     * Register an input with this datepicker.\n     * @param {?} input The datepicker input to register with this datepicker.\n     * @return {?}\n     */\n    MatDatepicker.prototype._registerInput = function (input) {\n        var _this = this;\n        if (this._datepickerInput) {\n            throw Error('An MatDatepicker can only be associated with a single input.');\n        }\n        this._datepickerInput = input;\n        this._inputSubscription =\n            this._datepickerInput._valueChange.subscribe(function (value) { return _this._selected = value; });\n    };\n    /**\n     * Open the calendar.\n     * @return {?}\n     */\n    MatDatepicker.prototype.open = function () {\n        if (this.opened || this.disabled) {\n            return;\n        }\n        if (!this._datepickerInput) {\n            throw Error('Attempted to open an MatDatepicker with no associated input.');\n        }\n        if (this._document) {\n            this._focusedElementBeforeOpen = this._document.activeElement;\n        }\n        this.touchUi ? this._openAsDialog() : this._openAsPopup();\n        this.opened = true;\n    };\n    /**\n     * Close the calendar.\n     * @return {?}\n     */\n    MatDatepicker.prototype.close = function () {\n        if (!this.opened) {\n            return;\n        }\n        if (this._popupRef && this._popupRef.hasAttached()) {\n            this._popupRef.detach();\n        }\n        if (this._dialogRef) {\n            this._dialogRef.close();\n            this._dialogRef = null;\n        }\n        if (this._calendarPortal && this._calendarPortal.isAttached) {\n            this._calendarPortal.detach();\n        }\n        if (this._focusedElementBeforeOpen &&\n            typeof this._focusedElementBeforeOpen.focus === 'function') {\n            this._focusedElementBeforeOpen.focus();\n            this._focusedElementBeforeOpen = null;\n        }\n        this.opened = false;\n    };\n    /**\n     * Open the calendar as a dialog.\n     * @return {?}\n     */\n    MatDatepicker.prototype._openAsDialog = function () {\n        var _this = this;\n        this._dialogRef = this._dialog.open(MatDatepickerContent, {\n            direction: this._dir ? this._dir.value : 'ltr',\n            viewContainerRef: this._viewContainerRef,\n            panelClass: 'mat-datepicker-dialog',\n        });\n        this._dialogRef.afterClosed().subscribe(function () { return _this.close(); });\n        this._dialogRef.componentInstance.datepicker = this;\n    };\n    /**\n     * Open the calendar as a popup.\n     * @return {?}\n     */\n    MatDatepicker.prototype._openAsPopup = function () {\n        var _this = this;\n        if (!this._calendarPortal) {\n            this._calendarPortal = new ComponentPortal(MatDatepickerContent, this._viewContainerRef);\n        }\n        if (!this._popupRef) {\n            this._createPopup();\n        }\n        if (!this._popupRef.hasAttached()) {\n            var /** @type {?} */ componentRef = this._popupRef.attach(this._calendarPortal);\n            componentRef.instance.datepicker = this;\n            // Update the position once the calendar has rendered.\n            first.call(this._ngZone.onStable.asObservable()).subscribe(function () {\n                _this._popupRef.updatePosition();\n            });\n        }\n        this._popupRef.backdropClick().subscribe(function () { return _this.close(); });\n    };\n    /**\n     * Create the popup.\n     * @return {?}\n     */\n    MatDatepicker.prototype._createPopup = function () {\n        var /** @type {?} */ overlayConfig = new OverlayConfig({\n            positionStrategy: this._createPopupPositionStrategy(),\n            hasBackdrop: true,\n            backdropClass: 'mat-overlay-transparent-backdrop',\n            direction: this._dir ? this._dir.value : 'ltr',\n            scrollStrategy: this._scrollStrategy(),\n            panelClass: 'mat-datepicker-popup',\n        });\n        this._popupRef = this._overlay.create(overlayConfig);\n    };\n    /**\n     * Create the popup PositionStrategy.\n     * @return {?}\n     */\n    MatDatepicker.prototype._createPopupPositionStrategy = function () {\n        return this._overlay.position()\n            .connectedTo(this._datepickerInput.getPopupConnectionElementRef(), { originX: 'start', originY: 'bottom' }, { overlayX: 'start', overlayY: 'top' })\n            .withFallbackPosition({ originX: 'start', originY: 'top' }, { overlayX: 'start', overlayY: 'bottom' })\n            .withFallbackPosition({ originX: 'end', originY: 'bottom' }, { overlayX: 'end', overlayY: 'top' })\n            .withFallbackPosition({ originX: 'end', originY: 'top' }, { overlayX: 'end', overlayY: 'bottom' });\n    };\n    MatDatepicker.decorators = [\n        { type: Component, args: [{selector: 'mat-datepicker',\n                    template: '',\n                    exportAs: 'matDatepicker',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    encapsulation: ViewEncapsulation.None,\n                    preserveWhitespaces: false,\n                },] },\n    ];\n    /**\n     * @nocollapse\n     */\n    MatDatepicker.ctorParameters = function () { return [\n        { type: MatDialog, },\n        { type: Overlay, },\n        { type: NgZone, },\n        { type: ViewContainerRef, },\n        { type: undefined, decorators: [{ type: Inject, args: [MAT_DATEPICKER_SCROLL_STRATEGY,] },] },\n        { type: DateAdapter, decorators: [{ type: Optional },] },\n        { type: Directionality, decorators: [{ type: Optional },] },\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] },] },\n    ]; };\n    MatDatepicker.propDecorators = {\n        'startAt': [{ type: Input },],\n        'startView': [{ type: Input },],\n        'touchUi': [{ type: Input },],\n        'disabled': [{ type: Input },],\n        'selectedChanged': [{ type: Output },],\n    };\n    return MatDatepicker;\n}());\nexport { MatDatepicker };\nfunction MatDatepicker_tsickle_Closure_declarations() {\n    /** @type {?} */\n    MatDatepicker.decorators;\n    /**\n     * @nocollapse\n     * @type {?}\n     */\n    MatDatepicker.ctorParameters;\n    /** @type {?} */\n    MatDatepicker.propDecorators;\n    /** @type {?} */\n    MatDatepicker.prototype._startAt;\n    /**\n     * The view that the calendar should start in.\n     * @type {?}\n     */\n    MatDatepicker.prototype.startView;\n    /**\n     * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n     * than a popup and elements have more padding to allow for bigger touch targets.\n     * @type {?}\n     */\n    MatDatepicker.prototype.touchUi;\n    /** @type {?} */\n    MatDatepicker.prototype._disabled;\n    /**\n     * Emits new selected date when selected date changes.\n     * @deprecated Switch to the `dateChange` and `dateInput` binding on the input element.\n     * @type {?}\n     */\n    MatDatepicker.prototype.selectedChanged;\n    /**\n     * Whether the calendar is open.\n     * @type {?}\n     */\n    MatDatepicker.prototype.opened;\n    /**\n     * The id for the datepicker calendar.\n     * @type {?}\n     */\n    MatDatepicker.prototype.id;\n    /** @type {?} */\n    MatDatepicker.prototype._validSelected;\n    /**\n     * A reference to the overlay when the calendar is opened as a popup.\n     * @type {?}\n     */\n    MatDatepicker.prototype._popupRef;\n    /**\n     * A reference to the dialog when the calendar is opened as a dialog.\n     * @type {?}\n     */\n    MatDatepicker.prototype._dialogRef;\n    /**\n     * A portal containing the calendar for this datepicker.\n     * @type {?}\n     */\n    MatDatepicker.prototype._calendarPortal;\n    /**\n     * The element that was focused before the datepicker was opened.\n     * @type {?}\n     */\n    MatDatepicker.prototype._focusedElementBeforeOpen;\n    /** @type {?} */\n    MatDatepicker.prototype._inputSubscription;\n    /**\n     * The input element this datepicker is associated with.\n     * @type {?}\n     */\n    MatDatepicker.prototype._datepickerInput;\n    /**\n     * Emits when the datepicker is disabled.\n     * @type {?}\n     */\n    MatDatepicker.prototype._disabledChange;\n    /** @type {?} */\n    MatDatepicker.prototype._dialog;\n    /** @type {?} */\n    MatDatepicker.prototype._overlay;\n    /** @type {?} */\n    MatDatepicker.prototype._ngZone;\n    /** @type {?} */\n    MatDatepicker.prototype._viewContainerRef;\n    /** @type {?} */\n    MatDatepicker.prototype._scrollStrategy;\n    /** @type {?} */\n    MatDatepicker.prototype._dateAdapter;\n    /** @type {?} */\n    MatDatepicker.prototype._dir;\n    /** @type {?} */\n    MatDatepicker.prototype._document;\n}\n//# sourceMappingURL=datepicker.js.map","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { DOWN_ARROW } from '@angular/cdk/keycodes';\nimport { Directive, ElementRef, EventEmitter, forwardRef, Inject, Input, Optional, Output, Renderer2, } from '@angular/core';\nimport { NG_VALIDATORS, NG_VALUE_ACCESSOR, Validators, } from '@angular/forms';\nimport { DateAdapter, MAT_DATE_FORMATS } from '@angular/material/core';\nimport { MatFormField } from '@angular/material/form-field';\nimport { Subscription } from 'rxjs/Subscription';\nimport { coerceDateProperty } from './coerce-date-property';\nimport { createMissingDateImplError } from './datepicker-errors';\nexport var /** @type {?} */ MAT_DATEPICKER_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(function () { return MatDatepickerInput; }),\n    multi: true\n};\nexport var /** @type {?} */ MAT_DATEPICKER_VALIDATORS = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(function () { return MatDatepickerInput; }),\n    multi: true\n};\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nvar MatDatepickerInputEvent = (function () {\n    /**\n     * @param {?} target\n     * @param {?} targetElement\n     */\n    function MatDatepickerInputEvent(target, targetElement) {\n        this.target = target;\n        this.targetElement = targetElement;\n        this.value = this.target.value;\n    }\n    return MatDatepickerInputEvent;\n}());\nexport { MatDatepickerInputEvent };\nfunction MatDatepickerInputEvent_tsickle_Closure_declarations() {\n    /**\n     * The new value for the target datepicker input.\n     * @type {?}\n     */\n    MatDatepickerInputEvent.prototype.value;\n    /** @type {?} */\n    MatDatepickerInputEvent.prototype.target;\n    /** @type {?} */\n    MatDatepickerInputEvent.prototype.targetElement;\n}\n/**\n * Directive used to connect an input to a MatDatepicker.\n */\nvar MatDatepickerInput = (function () {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _renderer\n     * @param {?} _dateAdapter\n     * @param {?} _dateFormats\n     * @param {?} _formField\n     */\n    function MatDatepickerInput(_elementRef, _renderer, _dateAdapter, _dateFormats, _formField) {\n        var _this = this;\n        this._elementRef = _elementRef;\n        this._renderer = _renderer;\n        this._dateAdapter = _dateAdapter;\n        this._dateFormats = _dateFormats;\n        this._formField = _formField;\n        /**\n         * Emits when a `change` event is fired on this `<input>`.\n         */\n        this.dateChange = new EventEmitter();\n        /**\n         * Emits when an `input` event is fired on this `<input>`.\n         */\n        this.dateInput = new EventEmitter();\n        /**\n         * Emits when the value changes (either due to user input or programmatic change).\n         */\n        this._valueChange = new EventEmitter();\n        /**\n         * Emits when the disabled state has changed\n         */\n        this._disabledChange = new EventEmitter();\n        this._onTouched = function () { };\n        this._cvaOnChange = function () { };\n        this._validatorOnChange = function () { };\n        this._datepickerSubscription = Subscription.EMPTY;\n        this._localeSubscription = Subscription.EMPTY;\n        /**\n         * The form control validator for whether the input parses.\n         */\n        this._parseValidator = function () {\n            return _this._lastValueValid ?\n                null : { 'matDatepickerParse': { 'text': _this._elementRef.nativeElement.value } };\n        };\n        /**\n         * The form control validator for the min date.\n         */\n        this._minValidator = function (control) {\n            var controlValue = coerceDateProperty(_this._dateAdapter, control.value);\n            return (!_this.min || !controlValue ||\n                _this._dateAdapter.compareDate(_this.min, controlValue) <= 0) ?\n                null : { 'matDatepickerMin': { 'min': _this.min, 'actual': controlValue } };\n        };\n        /**\n         * The form control validator for the max date.\n         */\n        this._maxValidator = function (control) {\n            var controlValue = coerceDateProperty(_this._dateAdapter, control.value);\n            return (!_this.max || !controlValue ||\n                _this._dateAdapter.compareDate(_this.max, controlValue) >= 0) ?\n                null : { 'matDatepickerMax': { 'max': _this.max, 'actual': controlValue } };\n        };\n        /**\n         * The form control validator for the date filter.\n         */\n        this._filterValidator = function (control) {\n            var controlValue = coerceDateProperty(_this._dateAdapter, control.value);\n            return !_this._dateFilter || !controlValue || _this._dateFilter(controlValue) ?\n                null : { 'matDatepickerFilter': true };\n        };\n        /**\n         * The combined form control validator for this input.\n         */\n        this._validator = Validators.compose([this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n        /**\n         * Whether the last value set on the input was valid.\n         */\n        this._lastValueValid = false;\n        if (!this._dateAdapter) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n        if (!this._dateFormats) {\n            throw createMissingDateImplError('MAT_DATE_FORMATS');\n        }\n        // Update the displayed date when the locale changes.\n        this._localeSubscription = _dateAdapter.localeChanges.subscribe(function () {\n            _this.value = _this.value;\n        });\n    }\n    Object.defineProperty(MatDatepickerInput.prototype, \"matDatepicker\", {\n        /**\n         * The datepicker that this input is associated with.\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this.registerDatepicker(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    MatDatepickerInput.prototype.registerDatepicker = function (value) {\n        if (value) {\n            this._datepicker = value;\n            this._datepicker._registerInput(this);\n        }\n    };\n    Object.defineProperty(MatDatepickerInput.prototype, \"matDatepickerFilter\", {\n        /**\n         * @param {?} filter\n         * @return {?}\n         */\n        set: function (filter) {\n            this._dateFilter = filter;\n            this._validatorOnChange();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatDatepickerInput.prototype, \"value\", {\n        /**\n         * The value of the input.\n         * @return {?}\n         */\n        get: function () {\n            return this._value;\n        },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            value = coerceDateProperty(this._dateAdapter, value);\n            this._lastValueValid = !value || this._dateAdapter.isValid(value);\n            value = this._getValidDateOrNull(value);\n            var /** @type {?} */ oldDate = this.value;\n            this._value = value;\n            this._renderer.setProperty(this._elementRef.nativeElement, 'value', value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '');\n            if (!this._dateAdapter.sameDate(oldDate, value)) {\n                this._valueChange.emit(value);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatDatepickerInput.prototype, \"min\", {\n        /**\n         * The minimum valid date.\n         * @return {?}\n         */\n        get: function () { return this._min; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this._min = coerceDateProperty(this._dateAdapter, value);\n            this._validatorOnChange();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatDatepickerInput.prototype, \"max\", {\n        /**\n         * The maximum valid date.\n         * @return {?}\n         */\n        get: function () { return this._max; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this._max = coerceDateProperty(this._dateAdapter, value);\n            this._validatorOnChange();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatDatepickerInput.prototype, \"disabled\", {\n        /**\n         * Whether the datepicker-input is disabled.\n         * @return {?}\n         */\n        get: function () { return this._disabled; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            var /** @type {?} */ newValue = coerceBooleanProperty(value);\n            if (this._disabled !== newValue) {\n                this._disabled = newValue;\n                this._disabledChange.emit(newValue);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MatDatepickerInput.prototype.ngAfterContentInit = function () {\n        var _this = this;\n        if (this._datepicker) {\n            this._datepickerSubscription =\n                this._datepicker.selectedChanged.subscribe(function (selected) {\n                    _this.value = selected;\n                    _this._cvaOnChange(selected);\n                    _this._onTouched();\n                    _this.dateInput.emit(new MatDatepickerInputEvent(_this, _this._elementRef.nativeElement));\n                    _this.dateChange.emit(new MatDatepickerInputEvent(_this, _this._elementRef.nativeElement));\n                });\n        }\n    };\n    /**\n     * @return {?}\n     */\n    MatDatepickerInput.prototype.ngOnDestroy = function () {\n        this._datepickerSubscription.unsubscribe();\n        this._localeSubscription.unsubscribe();\n        this._valueChange.complete();\n        this._disabledChange.complete();\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    MatDatepickerInput.prototype.registerOnValidatorChange = function (fn) {\n        this._validatorOnChange = fn;\n    };\n    /**\n     * @param {?} c\n     * @return {?}\n     */\n    MatDatepickerInput.prototype.validate = function (c) {\n        return this._validator ? this._validator(c) : null;\n    };\n    /**\n     * Gets the element that the datepicker popup should be connected to.\n     * @return {?} The element to connect the popup to.\n     */\n    MatDatepickerInput.prototype.getPopupConnectionElementRef = function () {\n        return this._formField ? this._formField.underlineRef : this._elementRef;\n    };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    MatDatepickerInput.prototype.writeValue = function (value) {\n        this.value = value;\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    MatDatepickerInput.prototype.registerOnChange = function (fn) {\n        this._cvaOnChange = fn;\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    MatDatepickerInput.prototype.registerOnTouched = function (fn) {\n        this._onTouched = fn;\n    };\n    /**\n     * @param {?} disabled\n     * @return {?}\n     */\n    MatDatepickerInput.prototype.setDisabledState = function (disabled) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', disabled);\n    };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    MatDatepickerInput.prototype._onKeydown = function (event) {\n        if (event.altKey && event.keyCode === DOWN_ARROW) {\n            this._datepicker.open();\n            event.preventDefault();\n        }\n    };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    MatDatepickerInput.prototype._onInput = function (value) {\n        var /** @type {?} */ date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n        this._lastValueValid = !date || this._dateAdapter.isValid(date);\n        date = this._getValidDateOrNull(date);\n        this._value = date;\n        this._cvaOnChange(date);\n        this._valueChange.emit(date);\n        this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    };\n    /**\n     * @return {?}\n     */\n    MatDatepickerInput.prototype._onChange = function () {\n        this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    };\n    /**\n     * @param {?} obj The object to check.\n     * @return {?} The given object if it is both a date instance and valid, otherwise null.\n     */\n    MatDatepickerInput.prototype._getValidDateOrNull = function (obj) {\n        return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n    };\n    MatDatepickerInput.decorators = [\n        { type: Directive, args: [{\n                    selector: 'input[matDatepicker]',\n                    providers: [MAT_DATEPICKER_VALUE_ACCESSOR, MAT_DATEPICKER_VALIDATORS],\n                    host: {\n                        '[attr.aria-haspopup]': 'true',\n                        '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n                        '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n                        '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n                        '[disabled]': 'disabled',\n                        '(input)': '_onInput($event.target.value)',\n                        '(change)': '_onChange()',\n                        '(blur)': '_onTouched()',\n                        '(keydown)': '_onKeydown($event)',\n                    },\n                    exportAs: 'matDatepickerInput',\n                },] },\n    ];\n    /**\n     * @nocollapse\n     */\n    MatDatepickerInput.ctorParameters = function () { return [\n        { type: ElementRef, },\n        { type: Renderer2, },\n        { type: DateAdapter, decorators: [{ type: Optional },] },\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DATE_FORMATS,] },] },\n        { type: MatFormField, decorators: [{ type: Optional },] },\n    ]; };\n    MatDatepickerInput.propDecorators = {\n        'matDatepicker': [{ type: Input },],\n        'matDatepickerFilter': [{ type: Input },],\n        'value': [{ type: Input },],\n        'min': [{ type: Input },],\n        'max': [{ type: Input },],\n        'disabled': [{ type: Input },],\n        'dateChange': [{ type: Output },],\n        'dateInput': [{ type: Output },],\n    };\n    return MatDatepickerInput;\n}());\nexport { MatDatepickerInput };\nfunction MatDatepickerInput_tsickle_Closure_declarations() {\n    /** @type {?} */\n    MatDatepickerInput.decorators;\n    /**\n     * @nocollapse\n     * @type {?}\n     */\n    MatDatepickerInput.ctorParameters;\n    /** @type {?} */\n    MatDatepickerInput.propDecorators;\n    /** @type {?} */\n    MatDatepickerInput.prototype._datepicker;\n    /** @type {?} */\n    MatDatepickerInput.prototype._dateFilter;\n    /** @type {?} */\n    MatDatepickerInput.prototype._value;\n    /** @type {?} */\n    MatDatepickerInput.prototype._min;\n    /** @type {?} */\n    MatDatepickerInput.prototype._max;\n    /** @type {?} */\n    MatDatepickerInput.prototype._disabled;\n    /**\n     * Emits when a `change` event is fired on this `<input>`.\n     * @type {?}\n     */\n    MatDatepickerInput.prototype.dateChange;\n    /**\n     * Emits when an `input` event is fired on this `<input>`.\n     * @type {?}\n     */\n    MatDatepickerInput.prototype.dateInput;\n    /**\n     * Emits when the value changes (either due to user input or programmatic change).\n     * @type {?}\n     */\n    MatDatepickerInput.prototype._valueChange;\n    /**\n     * Emits when the disabled state has changed\n     * @type {?}\n     */\n    MatDatepickerInput.prototype._disabledChange;\n    /** @type {?} */\n    MatDatepickerInput.prototype._onTouched;\n    /** @type {?} */\n    MatDatepickerInput.prototype._cvaOnChange;\n    /** @type {?} */\n    MatDatepickerInput.prototype._validatorOnChange;\n    /** @type {?} */\n    MatDatepickerInput.prototype._datepickerSubscription;\n    /** @type {?} */\n    MatDatepickerInput.prototype._localeSubscription;\n    /**\n     * The form control validator for whether the input parses.\n     * @type {?}\n     */\n    MatDatepickerInput.prototype._parseValidator;\n    /**\n     * The form control validator for the min date.\n     * @type {?}\n     */\n    MatDatepickerInput.prototype._minValidator;\n    /**\n     * The form control validator for the max date.\n     * @type {?}\n     */\n    MatDatepickerInput.prototype._maxValidator;\n    /**\n     * The form control validator for the date filter.\n     * @type {?}\n     */\n    MatDatepickerInput.prototype._filterValidator;\n    /**\n     * The combined form control validator for this input.\n     * @type {?}\n     */\n    MatDatepickerInput.prototype._validator;\n    /**\n     * Whether the last value set on the input was valid.\n     * @type {?}\n     */\n    MatDatepickerInput.prototype._lastValueValid;\n    /** @type {?} */\n    MatDatepickerInput.prototype._elementRef;\n    /** @type {?} */\n    MatDatepickerInput.prototype._renderer;\n    /** @type {?} */\n    MatDatepickerInput.prototype._dateAdapter;\n    /** @type {?} */\n    MatDatepickerInput.prototype._dateFormats;\n    /** @type {?} */\n    MatDatepickerInput.prototype._formField;\n}\n//# sourceMappingURL=datepicker-input.js.map","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, Input, ViewEncapsulation, } from '@angular/core';\nimport { MatDatepickerIntl } from './datepicker-intl';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Subscription } from 'rxjs/Subscription';\nimport { merge } from 'rxjs/observable/merge';\nimport { of as observableOf } from 'rxjs/observable/of';\nvar MatDatepickerToggle = (function () {\n    /**\n     * @param {?} _intl\n     * @param {?} _changeDetectorRef\n     */\n    function MatDatepickerToggle(_intl, _changeDetectorRef) {\n        this._intl = _intl;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._stateChanges = Subscription.EMPTY;\n    }\n    Object.defineProperty(MatDatepickerToggle.prototype, \"disabled\", {\n        /**\n         * Whether the toggle button is disabled.\n         * @return {?}\n         */\n        get: function () {\n            return this._disabled === undefined ? this.datepicker.disabled : this._disabled;\n        },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this._disabled = coerceBooleanProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    MatDatepickerToggle.prototype.ngOnChanges = function (changes) {\n        var _this = this;\n        if (changes.datepicker) {\n            var /** @type {?} */ datepicker = changes.datepicker.currentValue;\n            var /** @type {?} */ datepickerDisabled = datepicker ? datepicker._disabledChange : observableOf();\n            var /** @type {?} */ inputDisabled = datepicker && datepicker._datepickerInput ?\n                datepicker._datepickerInput._disabledChange :\n                observableOf();\n            this._stateChanges.unsubscribe();\n            this._stateChanges = merge(this._intl.changes, datepickerDisabled, inputDisabled)\n                .subscribe(function () { return _this._changeDetectorRef.markForCheck(); });\n        }\n    };\n    /**\n     * @return {?}\n     */\n    MatDatepickerToggle.prototype.ngOnDestroy = function () {\n        this._stateChanges.unsubscribe();\n    };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    MatDatepickerToggle.prototype._open = function (event) {\n        if (this.datepicker && !this.disabled) {\n            this.datepicker.open();\n            event.stopPropagation();\n        }\n    };\n    MatDatepickerToggle.decorators = [\n        { type: Component, args: [{selector: 'mat-datepicker-toggle',\n                    template: \"<button mat-icon-button type=\\\"button\\\" [attr.aria-label]=\\\"_intl.openCalendarLabel\\\" [disabled]=\\\"disabled\\\" (click)=\\\"_open($event)\\\"><mat-icon><svg xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 24 24\\\" width=\\\"100%\\\" height=\\\"100%\\\" fill=\\\"currentColor\\\" style=\\\"vertical-align: top\\\" focusable=\\\"false\\\"><path d=\\\"M0 0h24v24H0z\\\" fill=\\\"none\\\"/><path d=\\\"M19 3h-1V1h-2v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V8h14v11zM7 10h5v5H7z\\\"/></svg></mat-icon></button>\",\n                    host: {\n                        'class': 'mat-datepicker-toggle',\n                    },\n                    encapsulation: ViewEncapsulation.None,\n                    preserveWhitespaces: false,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                },] },\n    ];\n    /**\n     * @nocollapse\n     */\n    MatDatepickerToggle.ctorParameters = function () { return [\n        { type: MatDatepickerIntl, },\n        { type: ChangeDetectorRef, },\n    ]; };\n    MatDatepickerToggle.propDecorators = {\n        'datepicker': [{ type: Input, args: ['for',] },],\n        'disabled': [{ type: Input },],\n    };\n    return MatDatepickerToggle;\n}());\nexport { MatDatepickerToggle };\nfunction MatDatepickerToggle_tsickle_Closure_declarations() {\n    /** @type {?} */\n    MatDatepickerToggle.decorators;\n    /**\n     * @nocollapse\n     * @type {?}\n     */\n    MatDatepickerToggle.ctorParameters;\n    /** @type {?} */\n    MatDatepickerToggle.propDecorators;\n    /** @type {?} */\n    MatDatepickerToggle.prototype._stateChanges;\n    /**\n     * Datepicker instance that the button will toggle.\n     * @type {?}\n     */\n    MatDatepickerToggle.prototype.datepicker;\n    /** @type {?} */\n    MatDatepickerToggle.prototype._disabled;\n    /** @type {?} */\n    MatDatepickerToggle.prototype._intl;\n    /** @type {?} */\n    MatDatepickerToggle.prototype._changeDetectorRef;\n}\n//# sourceMappingURL=datepicker-toggle.js.map","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { A11yModule } from '@angular/cdk/a11y';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatCalendar } from './calendar';\nimport { MatCalendarBody } from './calendar-body';\nimport { MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER, MatDatepicker, MatDatepickerContent, } from './datepicker';\nimport { MatDatepickerInput } from './datepicker-input';\nimport { MatDatepickerIntl } from './datepicker-intl';\nimport { MatDatepickerToggle } from './datepicker-toggle';\nimport { MatMonthView } from './month-view';\nimport { MatYearView } from './year-view';\nvar MatDatepickerModule = (function () {\n    function MatDatepickerModule() {\n    }\n    MatDatepickerModule.decorators = [\n        { type: NgModule, args: [{\n                    imports: [\n                        CommonModule,\n                        MatButtonModule,\n                        MatDialogModule,\n                        MatIconModule,\n                        OverlayModule,\n                        A11yModule,\n                    ],\n                    exports: [\n                        MatCalendar,\n                        MatCalendarBody,\n                        MatDatepicker,\n                        MatDatepickerContent,\n                        MatDatepickerInput,\n                        MatDatepickerToggle,\n                        MatMonthView,\n                        MatYearView,\n                    ],\n                    declarations: [\n                        MatCalendar,\n                        MatCalendarBody,\n                        MatDatepicker,\n                        MatDatepickerContent,\n                        MatDatepickerInput,\n                        MatDatepickerToggle,\n                        MatMonthView,\n                        MatYearView,\n                    ],\n                    providers: [\n                        MatDatepickerIntl,\n                        MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER,\n                    ],\n                    entryComponents: [\n                        MatDatepickerContent,\n                    ]\n                },] },\n    ];\n    /**\n     * @nocollapse\n     */\n    MatDatepickerModule.ctorParameters = function () { return []; };\n    return MatDatepickerModule;\n}());\nexport { MatDatepickerModule };\nfunction MatDatepickerModule_tsickle_Closure_declarations() {\n    /** @type {?} */\n    MatDatepickerModule.decorators;\n    /**\n     * @nocollapse\n     * @type {?}\n     */\n    MatDatepickerModule.ctorParameters;\n}\n//# sourceMappingURL=datepicker-module.js.map","/**\n * Generated bundle index. Do not edit.\n */\nexport { MatDatepickerModule, MatCalendar, MatCalendarCell, MatCalendarBody, coerceDateProperty, MAT_DATEPICKER_SCROLL_STRATEGY, MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY, MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER, MatDatepickerContent, MatDatepicker, MAT_DATEPICKER_VALUE_ACCESSOR, MAT_DATEPICKER_VALIDATORS, MatDatepickerInputEvent, MatDatepickerInput, MatDatepickerIntl, MatDatepickerToggle, MatMonthView, MatYearView } from './public-api';\n//# sourceMappingURL=index.js.map"],"names":["first","observableOf"],"mappings":"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"}